<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 蛙二的思考</title>
    <link>/post/</link>
    <description>Recent content in Posts on 蛙二的思考</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <lastBuildDate>Wed, 01 Sep 2021 12:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>对昼伏夜出和朝九晚五两个技战法的分析</title>
      <link>/post/210901/</link>
      <pubDate>Wed, 01 Sep 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210901/</guid>
      <description>单看这两个模型的名字，含义好像是非此即彼的，研究它的时间划分，以及计分细节，才体会到这两个模型想表达含义的差异。 模型定义 昼伏夜出定义了4个时</description>
    </item>
    
    <item>
      <title>git的远程访问辨析</title>
      <link>/post/210729/</link>
      <pubDate>Thu, 29 Jul 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210729/</guid>
      <description>git虽然是个分布式版本管理工具，但在我看来网络协议的支持是开发比较晚的，共有4种协议： local协议，其实就是把另一个目录看成是远程仓库，</description>
    </item>
    
    <item>
      <title>PySpark分析</title>
      <link>/post/210721/</link>
      <pubDate>Wed, 21 Jul 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210721/</guid>
      <description>执行过程 常用的有local和yarn两种模式，写代码或调错阶段，无特殊情况用local，速度快很多。 pyspark和scala的spark不</description>
    </item>
    
    <item>
      <title>erlang和其上的扩展语言</title>
      <link>/post/210614/</link>
      <pubDate>Mon, 14 Jun 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210614/</guid>
      <description>包的划分 cent拆得比较细，运行时放在最核心的erts包，其它lib目录下的库，像compiler,debugger,edoc,kernel</description>
    </item>
    
    <item>
      <title>lisp编程与结构化思想</title>
      <link>/post/210613/</link>
      <pubDate>Sun, 13 Jun 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210613/</guid>
      <description>熟悉了vim的sexp模式后，再进行lisp编程，这时操作时脑中思考的就不再是一行文本，而是一整个表达式块，我要在这个表达式外再施加一层操作</description>
    </item>
    
    <item>
      <title>理解shell的换行和打印</title>
      <link>/post/210611/</link>
      <pubDate>Fri, 11 Jun 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210611/</guid>
      <description>写sh时想把一段文本的json变量传给程序，但因为带了换行符，总是失败。大概是因为sh面向终端操作，而换行符又是命令发起的标志，哪怕这个换行</description>
    </item>
    
    <item>
      <title>vim的自定义扩展</title>
      <link>/post/210421/</link>
      <pubDate>Wed, 21 Apr 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210421/</guid>
      <description>理念的区别 扩展的最终目的，是把操作映射为脚本化的描述，说到这点不得不和EMACS做个对比。 EMACS更强于函数描述，函数和变量在EMACS中</description>
    </item>
    
    <item>
      <title>数据库的执行优化</title>
      <link>/post/210404/</link>
      <pubDate>Sun, 04 Apr 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210404/</guid>
      <description>现代数据库都基于成本做CBO优化，CBO的难点在评估不同规则组合的期望时间，这里就会有组合爆炸的问题，为此就有了两种模型：Volcano模型</description>
    </item>
    
    <item>
      <title>对公有云上数仓的调研</title>
      <link>/post/210322/</link>
      <pubDate>Mon, 22 Mar 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210322/</guid>
      <description>Snowflake的数仓产品在架构上分为三级，从下到上的功能分别是（以Amazon为例，这块有论文相对详细，MG两家没什么资料） DataSt</description>
    </item>
    
    <item>
      <title>hadoop体系理解</title>
      <link>/post/210216/</link>
      <pubDate>Tue, 16 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210216/</guid>
      <description>从上向下分了若干层 DataNode: 同时还执行NodeManager进程 ResourceManager: 通称yarn，管理service和node两个维度。yarn rmadmin -getAllSer</description>
    </item>
    
    <item>
      <title>线程模型与调度</title>
      <link>/post/210211/</link>
      <pubDate>Thu, 11 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210211/</guid>
      <description>共有3种线程模型，以x:y命名，即x个用户线程对应y个内核调度实体(Kernel Scheduling Entity，这个是内核分配CPU的对象单位)。 多对一(M</description>
    </item>
    
    <item>
      <title>Linux的权限与sudo辨析</title>
      <link>/post/210205/</link>
      <pubDate>Fri, 05 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210205/</guid>
      <description>组 id命令显示gid和groups输出，原因是每个用户只有一个初始组，但会加入多个组。当只有一个组时，这两个输出相同，加入多组就能看到区别。</description>
    </item>
    
    <item>
      <title>防火墙与iptables</title>
      <link>/post/210202/</link>
      <pubDate>Tue, 02 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210202/</guid>
      <description>至少要两块网卡分别控制流进和流出，才能实现完整的防火功能，即使是纯软防火墙也要两张卡。 Linux中起防火墙作用的是Netfilter，而ip</description>
    </item>
    
    <item>
      <title>mount和文件路径改写</title>
      <link>/post/210129/</link>
      <pubDate>Fri, 29 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210129/</guid>
      <description>mount的参数很多，关键概念就是将device挂到mountpoint。其它的参数是因为device必然涉及很多控制选项。 有两个重要的关联</description>
    </item>
    
    <item>
      <title>网络代理概念与区别</title>
      <link>/post/210120/</link>
      <pubDate>Wed, 20 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210120/</guid>
      <description>模式 全局模式 所有连接全从指定的端口转发出去，简单却不灵活 PAC模式，全称代理自动配置，由网景公司在1996年在2.0版本的navigator</description>
    </item>
    
    <item>
      <title>多核CPU之间的异同</title>
      <link>/post/210106/</link>
      <pubDate>Wed, 06 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>/post/210106/</guid>
      <description>Power是标准的SMP架构，而X86则是NUMA。由于SMP访问内存速度一致，因此Power可以轻松上16socket，而NUMA对内存区</description>
    </item>
    
    <item>
      <title>vim的自动补全</title>
      <link>/post/201225/</link>
      <pubDate>Fri, 25 Dec 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/201225/</guid>
      <description>自动补全有15种模式（:help ins-completion）。其中有两种的补全列表内容与另外两种相同，只是排序不同 文字编辑用的 3 种: K 模式</description>
    </item>
    
    <item>
      <title>二三层网络和MAC地址</title>
      <link>/post/201101/</link>
      <pubDate>Sun, 01 Nov 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/201101/</guid>
      <description>根据OSI的七层模型，二层协议包含PPP、ARP，而三层包含IP、IGMP。 不同网段（子网）的ip通信，需要经过三层网络。相同网段的ip通信</description>
    </item>
    
    <item>
      <title>shell的历史和流派</title>
      <link>/post/201009/</link>
      <pubDate>Fri, 09 Oct 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/201009/</guid>
      <description>源起Bourne 最初unix系统用的是ken thompson写的shell，不过这个只在贝尔实验室内部用，最早广泛流行的version 7 un</description>
    </item>
    
    <item>
      <title>python点滴记录</title>
      <link>/post/200925/</link>
      <pubDate>Fri, 25 Sep 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200925/</guid>
      <description>多线程 拜臭名昭著的GIL所赐，多线程只在IO密集场景下有一战之力。即便只能用到一个核，锁还是必须的，但这个锁和OS的锁不同，是语言级别的锁，</description>
    </item>
    
    <item>
      <title>多进程与进程间通信</title>
      <link>/post/200830/</link>
      <pubDate>Sun, 30 Aug 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200830/</guid>
      <description>在linux中，fork和vfork的系统调用都是clone，当然标记是不同。 fork: CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD vfork: CLONE_VM|CLONE_VFORK pthread_create: CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID 以目前的性能优化而言，两者的开销区别并不大，更大的</description>
    </item>
    
    <item>
      <title>神经网络来源与分类</title>
      <link>/post/200727/</link>
      <pubDate>Mon, 27 Jul 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200727/</guid>
      <description>神经网络技术起源于上世纪五、六十年代，当时叫感知机（perceptron），包含有输入层、输出层和一个隐藏层。输入的特征向量通过隐藏层变换到</description>
    </item>
    
    <item>
      <title>Spark学习手记</title>
      <link>/post/200725/</link>
      <pubDate>Sat, 25 Jul 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200725/</guid>
      <description>组件构成 作为一个分布式系统，物理节点分为master和worker节点，master调度，worker计算。 运行职责，即进程级的分为driv</description>
    </item>
    
    <item>
      <title>Python的包机制</title>
      <link>/post/200606/</link>
      <pubDate>Sat, 06 Jun 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200606/</guid>
      <description>包机制的区别 python社会前后有easy_install的egg和pip的wheel两种机制，另有anaconda给出的conda方案。p</description>
    </item>
    
    <item>
      <title>strace观察程序</title>
      <link>/post/200530/</link>
      <pubDate>Sat, 30 May 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200530/</guid>
      <description>写程序一定要注重观察，原始的如print，而系统级别的过程只能用更复杂的工具观察。用strace观察多线程的始末是个很好的方式，trace内</description>
    </item>
    
    <item>
      <title>代码写法中的状态与异常</title>
      <link>/post/200509/</link>
      <pubDate>Sat, 09 May 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200509/</guid>
      <description>最近在做构造数据的工作，代码是另两人写的python，在改造过程中，修正了我以往对对象和异常的认识。 以前写代码既不爱用类和对象，也不用异常捕</description>
    </item>
    
    <item>
      <title>Linux内核与PAM模块简记</title>
      <link>/post/200427/</link>
      <pubDate>Mon, 27 Apr 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200427/</guid>
      <description>前因是容器中启动nfsd需要依赖内核加载ko模块，分读写记一下。 lsmod命令，或查看/proc/modules看到内核当前加载的ko模块。</description>
    </item>
    
    <item>
      <title>不可打印字符与转义序列</title>
      <link>/post/200411/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200411/</guid>
      <description>plan9的老人们建过一个网站cat-v.org，影射cat命令加上-v选项是邪恶的。这个选项的作用是把不可打印的控制字符显示出来，低128</description>
    </item>
    
    <item>
      <title>嵌套加载的目录查找方式比较</title>
      <link>/post/200402/</link>
      <pubDate>Thu, 02 Apr 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200402/</guid>
      <description>动态语言的加载通常会有一个路径列表，加载时按列表顺序寻找。这个列表里大部分是绝对路径，但也会有当前相对路径，当嵌套加载时，相对路径如何定位就</description>
    </item>
    
    <item>
      <title>数据库计算理论笔记</title>
      <link>/post/200327/</link>
      <pubDate>Fri, 27 Mar 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200327/</guid>
      <description>分布式 CAP三者只能选其二，也可以只求一个达到最大化，没有见过实际例子。 取CA，又名强一致性 ACID，但是分布式系统必然要求P，所以可以把A</description>
    </item>
    
    <item>
      <title>数据库SQL优化原理</title>
      <link>/post/200321/</link>
      <pubDate>Sat, 21 Mar 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200321/</guid>
      <description>粗略地说关系型数据库都是这几步，具体前后顺序根据不同dbms不同配置下略有小差 应用程序与数据库服务器建立链接 sql发送到数据库，数据库验证是</description>
    </item>
    
    <item>
      <title>经度纬度和GeoHash</title>
      <link>/post/200314/</link>
      <pubDate>Sat, 14 Mar 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200314/</guid>
      <description>对经纬度对应的长度，我一直有个错误的认识，经度共360度纬度180度，而地球又非常接近球形，意味着每1经度的距离只有纬度的一半。但是在看了G</description>
    </item>
    
    <item>
      <title>lisp的3个处理阶段</title>
      <link>/post/200305/</link>
      <pubDate>Thu, 05 Mar 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200305/</guid>
      <description>看似简单的表达式解析，其实细分为3个阶段 读取期read time，将外部文本表示解析为语法对象syntax object，标记出宏，在下一环节处</description>
    </item>
    
    <item>
      <title>布尔代数与三段论</title>
      <link>/post/200301/</link>
      <pubDate>Sun, 01 Mar 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200301/</guid>
      <description>莱布尼茨发明微积分时已定义一套符号体系，更设想了一套通用的代数体系。到了乔治布尔时，提出了用符号代表类别的理念，比如 x表示绵羊，y表示白色，</description>
    </item>
    
    <item>
      <title>多终端打开软件用法</title>
      <link>/post/200207/</link>
      <pubDate>Fri, 07 Feb 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200207/</guid>
      <description>GNU screen 修改默认的引导键C-a时，命令行启动时使用screen -e^tt绑定到C-t。前一个t表示自定义命令字符，相当于所有命令的触发按钮，后一</description>
    </item>
    
    <item>
      <title>安卓的linker</title>
      <link>/post/200126/</link>
      <pubDate>Sun, 26 Jan 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200126/</guid>
      <description>在termux(android5)编译的程序，放到4.2的机器上执行，报line 1: syntax error: unexpected &amp;quot;)&amp;quot;无法执行，第1行出现/sy</description>
    </item>
    
    <item>
      <title>tags的说明和比较</title>
      <link>/post/200125/</link>
      <pubDate>Sat, 25 Jan 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200125/</guid>
      <description>通用编辑软件用于代码有两个点，看时方便跳转和写时方便补全，跳转靠的就是tags。 tags有两种主流实现ctags和etags。ctags诞生</description>
    </item>
    
    <item>
      <title>putty的配置</title>
      <link>/post/200122/</link>
      <pubDate>Wed, 22 Jan 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200122/</guid>
      <description>putty是个免费且方便的终端工具，其它像xshell等在按下Alt时会触发菜单栏，导致使用emacs时不好用，但是putty默认的配置不如</description>
    </item>
    
    <item>
      <title>shell的模式与选项</title>
      <link>/post/200108/</link>
      <pubDate>Wed, 08 Jan 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200108/</guid>
      <description>起因是看到有人写脚本，用/bin/cp方式复制文件，说是因为cp在复制时如果文件名相同会提示是否覆盖，导致脚本会停住。这个行为是因为操作系统</description>
    </item>
    
    <item>
      <title>硬盘分区和文件系统散记</title>
      <link>/post/200105/</link>
      <pubDate>Sun, 05 Jan 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200105/</guid>
      <description>file命令的-s选项可以查看块设备的特性，比如file -s /dev/sda能看到这块盘是GRUB启动程序，接着又是若干个分区。而直接file</description>
    </item>
    
    <item>
      <title>命令行工具用法探索</title>
      <link>/post/200102/</link>
      <pubDate>Thu, 02 Jan 2020 12:00:00 +0000</pubDate>
      
      <guid>/post/200102/</guid>
      <description>ls --hide可以隐藏不想看的目录 find 最核心参数是path和expression，这两个参数都有默认值，path是当前目录，expressio</description>
    </item>
    
    <item>
      <title>编程语言的字符串内部表示</title>
      <link>/post/191206/</link>
      <pubDate>Fri, 06 Dec 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/191206/</guid>
      <description>最近在做中文字符校验，结合几种语言的使用，做个总结。除了ASCII字符集以外，其它文字普遍有定义和外部展示的区分，即使不考虑各国定义的标准外</description>
    </item>
    
    <item>
      <title>LDAP和NetBIOS协议</title>
      <link>/post/191107/</link>
      <pubDate>Thu, 07 Nov 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/191107/</guid>
      <description>LDAP是一种目录访问协议。这里的目录代表实体，可以是一个文件或某个人的信息，通常这些信息以树状形式保存，类似目录树。和关系型数据库不同，L</description>
    </item>
    
    <item>
      <title>docker用法</title>
      <link>/post/191105/</link>
      <pubDate>Tue, 05 Nov 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/191105/</guid>
      <description>Docker的本质是设置了namespace和cgroup参数的进程。是沙盒概念在linux上的具体实现，安卓上运行的每个app都是类似于D</description>
    </item>
    
    <item>
      <title>子进程执行和信号</title>
      <link>/post/191101/</link>
      <pubDate>Fri, 01 Nov 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/191101/</guid>
      <description>system(2)调用子进程非常方便，返回类型int，但不是脚本真正的返回值，对待这个返回值，要先用WIFEXITED是否非0，非0表示成功</description>
    </item>
    
    <item>
      <title>HTTP协议细节</title>
      <link>/post/191020/</link>
      <pubDate>Sun, 20 Oct 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/191020/</guid>
      <description>body内容的类型是从邮件标准抄的，形式上用/划分大小类别。历史上邮件发展要早得多，发送附件的需求也更迫切。 重定向3XX至少有5个值，但是广</description>
    </item>
    
    <item>
      <title>SSL和SSH比较</title>
      <link>/post/190926/</link>
      <pubDate>Thu, 26 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190926/</guid>
      <description>两者都是常见的安全术语，安全包含四层含义 数据加密，即抓包不可读，看上去是乱码，这个最好理解，也最直观 数据完整性，这是第二个层次，即数据虽然被</description>
    </item>
    
    <item>
      <title>JS的单线程和运行时</title>
      <link>/post/190921/</link>
      <pubDate>Sat, 21 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190921/</guid>
      <description>JS的单线程特性(eventloop)不仅体现在浏览器上，node同样，二者的运行逻辑可能有区别。所以别的语言常见的sleep函数，都必须要</description>
    </item>
    
    <item>
      <title>进程线程和协程的切换开销</title>
      <link>/post/190918/</link>
      <pubDate>Wed, 18 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190918/</guid>
      <description>测试Context Switch time(进程上下文切换时间) ，创建两个进程(实时进程)并在它们之间传送一个令牌，如此往返传送一定的次数。其中一个进程在</description>
    </item>
    
    <item>
      <title>PostgreSQL备忘</title>
      <link>/post/190913/</link>
      <pubDate>Fri, 13 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190913/</guid>
      <description>其前身是由Stonebraker创造的ingres（1974）和postgres（1986），Postgres和ingres在90年代之前都</description>
    </item>
    
    <item>
      <title>Kerberos与SASL的理解</title>
      <link>/post/190912/</link>
      <pubDate>Thu, 12 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190912/</guid>
      <description>实现用得最多MIT的版本（Heimdal有，微软有个非兼容版本SSPI，而AD则是KDC和LDAP的结合体），协议在RFC定义。理念和用途与</description>
    </item>
    
    <item>
      <title>数据库的行转列与列转行</title>
      <link>/post/190907/</link>
      <pubDate>Sat, 07 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190907/</guid>
      <description>行转列 指把键值关系表（如从BerkleyDB导入的数据），变成围绕一个中心元素的详细表（列通常会很多）。就从原始的很多行的KV数据，变成行数</description>
    </item>
    
    <item>
      <title>traceroute原理和ICMP</title>
      <link>/post/190901/</link>
      <pubDate>Sun, 01 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190901/</guid>
      <description>项目中遇到ping返回time to live exceeded，即TTL超出，展开讲讲。 ping是基于ICMP协议，它是附在IP协议的数据段的一种应用协</description>
    </item>
    
    <item>
      <title>数据挖掘、机器学习和深度学习</title>
      <link>/post/190827/</link>
      <pubDate>Tue, 27 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190827/</guid>
      <description>数据挖掘是应用方向，挖掘有两种含义，广义的指从数据中得到有用的信息。狭义的挖掘和传统的机器学习可以近似认为一回事，通过公式进行计算。要解决的</description>
    </item>
    
    <item>
      <title>类型理论</title>
      <link>/post/190820/</link>
      <pubDate>Tue, 20 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190820/</guid>
      <description>null最好是提升到类型级别，而不是作为特殊值，编译器会推导保证类型正确，而值只能在runtime时直接崩溃。 函数是不是first class</description>
    </item>
    
    <item>
      <title>协程剖析</title>
      <link>/post/190817/</link>
      <pubDate>Sat, 17 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190817/</guid>
      <description>协程的历史很早，随着非阻塞(NonBlock)操作的日渐普遍，每一次非阻塞指令都配套回调，代码可读性很差，于是协程就重新被人捡起。 分为有栈协</description>
    </item>
    
    <item>
      <title>公安数仓总结</title>
      <link>/post/190815/</link>
      <pubDate>Thu, 15 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190815/</guid>
      <description>和阿里建设大数据为了提高转化率留存率不同，公安并没有明确的提高指标，而是建立尽可能完备的数仓，在遇到案件时能尽量多地挖掘出可能有用的信息。 数</description>
    </item>
    
    <item>
      <title>SQL语言梳理</title>
      <link>/post/190808/</link>
      <pubDate>Thu, 08 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190808/</guid>
      <description>理论依据 SQL的背后是集合论和一阶谓词逻辑（Codd的原始论文曾设想二阶谓词，因太复杂放弃了）。操作的结果是封闭的，即输入和输出都是关系，这</description>
    </item>
    
    <item>
      <title>数据库和数仓的历史</title>
      <link>/post/190801/</link>
      <pubDate>Thu, 01 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190801/</guid>
      <description>数据库是计算机最早的应用系统，阿波罗计划时就有了数据库原型，这便是1968年的IBM ICS系统，69年改名为IMS/360（层次型数据库）。</description>
    </item>
    
    <item>
      <title>学Scheme经历的误区</title>
      <link>/post/190722/</link>
      <pubDate>Mon, 22 Jul 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190722/</guid>
      <description>从SICP上手的人往往觉得一个list类型包打天下，以致于看到R5RS中特别定义vector都很惊讶。其实就像其它成熟语言一样，容器有很多分</description>
    </item>
    
    <item>
      <title>感悟项目开发和问题分解</title>
      <link>/post/190708/</link>
      <pubDate>Mon, 08 Jul 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190708/</guid>
      <description>最近做完两个网站类项目，流程还是很有必要的。一个功能从产品经理构思，到UE/UI设计交互，到程序员编码，到最后测试反馈是一个完整的闭环，谁先</description>
    </item>
    
    <item>
      <title>Go语言学习笔记</title>
      <link>/post/190705/</link>
      <pubDate>Fri, 05 Jul 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190705/</guid>
      <description>go.mod 很久不用go，现在module已经是默认行为，不再要求在GOPATH目录编译，而是鼓励在当前或父目录添加go.mod文件来定义工程。配置g</description>
    </item>
    
    <item>
      <title>Linux上的虚拟化</title>
      <link>/post/190703/</link>
      <pubDate>Wed, 03 Jul 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190703/</guid>
      <description>容器化 为了实现弹性计算和灵活迁移，把一台机器跑出尽可能多的实例，且实例间做到隔离，容器化相比虚拟机，省去了kernel的模拟，没有驱动方面的</description>
    </item>
    
    <item>
      <title>如何学习emacs</title>
      <link>/post/190625/</link>
      <pubDate>Tue, 25 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190625/</guid>
      <description>写在前面 arm版的emacs的安装包35M，vim是20M，虽然大一些但还是同一量级，执行体emacs约4.7M，而vim约2.2M。之所以</description>
    </item>
    
    <item>
      <title>perf使用</title>
      <link>/post/190623/</link>
      <pubDate>Sun, 23 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190623/</guid>
      <description>包含二十多个命令的合集入口 序号 命令 作用 annotate 解析perf record生成的perf.data文件，显示被注释的代码。 archive 根据数据文件记录的buil</description>
    </item>
    
    <item>
      <title>编辑器的扩展机制</title>
      <link>/post/190620/</link>
      <pubDate>Thu, 20 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190620/</guid>
      <description>如今的编辑器没有插件机制都不好意思出来见人，但什么是真正好的机制？ 像Emacs，所有的操作都可以对应函数，再用Elisp把已有的函数和数据结</description>
    </item>
    
    <item>
      <title>性能监测工具选项备忘</title>
      <link>/post/190618/</link>
      <pubDate>Tue, 18 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190618/</guid>
      <description>top 默认显示Task数量，用 top -H 切换到线程模式，显示Thread的数量。也可以 top -H -p xxx 仅显示某进程的线程。top -a按内存使用排序。 ps -T或-</description>
    </item>
    
    <item>
      <title>nginx工作流程</title>
      <link>/post/190615/</link>
      <pubDate>Sat, 15 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190615/</guid>
      <description>master-worker的流程如下 当worker被意外终止时，master会启动一个新的，且work-id不变，保持逻辑一贯性。即使mas</description>
    </item>
    
    <item>
      <title>TeX学习笔记</title>
      <link>/post/190613/</link>
      <pubDate>Thu, 13 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190613/</guid>
      <description>到现在TeX还有价值的至少有3块 box-and-glue model hyphenation algorithm line-breaking algorithm 要分清几个概念 引擎: 执行程序，用得最多的是 pdftex(越南人写的)，最近比较新的有 xetex, luate</description>
    </item>
    
    <item>
      <title>网页链接</title>
      <link>/post/190607/</link>
      <pubDate>Fri, 07 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190607/</guid>
      <description>OCaml和SML比较 http://adam.chlipala.net/mlcomp/ 目前还在使用中的 Standard ML 实现有4个：经典的 SML/NJ（只有32位版本）、Moscow ML、Poly/ML 和 MLton。</description>
    </item>
    
    <item>
      <title>批处理的用法</title>
      <link>/post/190528/</link>
      <pubDate>Tue, 28 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190528/</guid>
      <description>工作原因不得不用批处理打包，网上介绍的函数用法并不准确。 用 :func 加 goto eof的方式可以定义一个块，但它还算不上函数，如果执行流到了定义开始处，会继</description>
    </item>
    
    <item>
      <title>HTTP的认证方式</title>
      <link>/post/190526/</link>
      <pubDate>Sun, 26 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190526/</guid>
      <description>HTTP初衷是定义为无状态协议，但随着使用日渐广泛，认证也纳入了RFC7235的定义。客户端如果请求一个不被允许的资源，服务端返回401或4</description>
    </item>
    
    <item>
      <title>远程文件传输说明</title>
      <link>/post/190524/</link>
      <pubDate>Fri, 24 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190524/</guid>
      <description>由于安全性的关系，很多新系统默认不提供FTP功能，要交互文件就需要别的方式，好在SSH整合了SFTP子系统。不用额外启动守护，只要sshd_</description>
    </item>
    
    <item>
      <title>域名和DNS的事</title>
      <link>/post/190520/</link>
      <pubDate>Mon, 20 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190520/</guid>
      <description>自从2016年5月注册免费的DDNS域名已经过去3年了，一直用却从未深究过其中原理。网上提供免费域名的服务商不少，几个知名的直接在路由器内嵌</description>
    </item>
    
    <item>
      <title>对称加密实践</title>
      <link>/post/190506/</link>
      <pubDate>Mon, 06 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190506/</guid>
      <description>所有对称加密的核心是XOR运算，因为XOR运算有一个非常神奇的特性A*B*B=A。也就是说A与B进行XOR运算之后的结果再和B运算就能复原A</description>
    </item>
    
    <item>
      <title>博客网站功能扩展记录</title>
      <link>/post/190504/</link>
      <pubDate>Sat, 04 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190504/</guid>
      <description>调试 一直以来对Web开发调试都没有好的办法，知道了error_log函数可以记日志。记录的文件名通过php.ini来设置 error_log = php_errors.log 这种相对路径的</description>
    </item>
    
    <item>
      <title>蒙古帝国</title>
      <link>/post/190502/</link>
      <pubDate>Thu, 02 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190502/</guid>
      <description>成吉思汗传位给窝阔台再传给贵由后，却不能守，被拖雷之子蒙哥抢了帝位，最终传于忽必烈改为元朝。 蒙哥、忽必烈、旭烈兀、阿里不哥是拖雷的4个儿子，</description>
    </item>
    
    <item>
      <title>Linux的软件包管理软件说明</title>
      <link>/post/190501/</link>
      <pubDate>Wed, 01 May 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190501/</guid>
      <description>不同发行版有独特的包管理软件，分为打包软件和包管理两块，相对来说打包软件定义包的格式，而包管理要解决的问题要复杂得多。 添加软件时，要记录所有</description>
    </item>
    
    <item>
      <title>网络文件系统机制</title>
      <link>/post/190429/</link>
      <pubDate>Mon, 29 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190429/</guid>
      <description>几种常见的NAS协议，FTP无法挂载到路径，AFS只有Apple用，几乎遇不到，说说Samba(smb又叫CIFS)和nfs方式 Samba 有1和2两</description>
    </item>
    
    <item>
      <title>浏览器的网络请求发展史</title>
      <link>/post/190420/</link>
      <pubDate>Sat, 20 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190420/</guid>
      <description>偶然间推论出的历史脉络 HTTP0.9版只有GET，加上当时浏览器最初的定位就是互相看文档，初代只是个能在地址栏发起GET的图形程序。 慢慢地应</description>
    </item>
    
    <item>
      <title>网站性能测试</title>
      <link>/post/190413/</link>
      <pubDate>Sat, 13 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190413/</guid>
      <description>14年5月我用PHP做了个公司网页，查询协议文档。今天用ab测了性能简直掉了下巴。 linux配置4核4G，Xeon E5-2680v3 2.5G。windows</description>
    </item>
    
    <item>
      <title>微服务的理解和实践</title>
      <link>/post/190410/</link>
      <pubDate>Wed, 10 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190410/</guid>
      <description>大型系统由于业务复杂，理论上通过合理的约定，一个服务没问题，就像linux至今仍是宏内核。但大部分的团队没有自制力，只好强制拆分，使每个功能</description>
    </item>
    
    <item>
      <title>网站项目教训</title>
      <link>/post/190408/</link>
      <pubDate>Mon, 08 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190408/</guid>
      <description>MySQL 用service 启动MySQL后，会发现进程有两个，mysqld_save和mysqld，save是个shell脚本，做些资源守护。记得开</description>
    </item>
    
    <item>
      <title>Java程序的演变</title>
      <link>/post/190326/</link>
      <pubDate>Tue, 26 Mar 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190326/</guid>
      <description>编译后的class类似lua的luac文件，jvm去加载并从指定的类开始跑。不过从一开始，java就支持导入和打包，尤其是打包，引申出很多内</description>
    </item>
    
    <item>
      <title>git概念理解</title>
      <link>/post/190312/</link>
      <pubDate>Tue, 12 Mar 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190312/</guid>
      <description>和cvs比最大的差异是多出了暂存区index的概念，每次提交都分为add(也可以用stage，同义词)和ci两个步骤。有观点提出，这是为了达</description>
    </item>
    
    <item>
      <title>Unicode的若干概念</title>
      <link>/post/190223/</link>
      <pubDate>Sat, 23 Feb 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190223/</guid>
      <description>可以把Unicode想成一本字典，规定了每个文字的映射(严格的说有些带声调的文字是组合出来的)。ASCII的删除键DEL编码是0x7F，在打</description>
    </item>
    
    <item>
      <title>程序语言的依赖包管理</title>
      <link>/post/190220/</link>
      <pubDate>Wed, 20 Feb 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190220/</guid>
      <description>没有人可以写从到尾写完一个程序，除了内核这种项目，多都需要依赖其它库或源码，解决依赖也成了各种语言的基本功。又细分了两个需求：全局的包管理和</description>
    </item>
    
    <item>
      <title>Android安装Linux环境</title>
      <link>/post/190215/</link>
      <pubDate>Fri, 15 Feb 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190215/</guid>
      <description>15年时试用过kbox，毕竟是个半成品，到2019年2月，安卓跑终端已经很成熟了。和Linux比，安卓的模拟环境是单用户且用户名已预置，在4</description>
    </item>
    
    <item>
      <title>vim的概念和配置</title>
      <link>/post/190209/</link>
      <pubDate>Sat, 09 Feb 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190209/</guid>
      <description>编译遇到的问题 在cent6上遇到Python无法编译出动态库，只有.a库，这时编译vim的选项 ./configure &amp;ndash;with-features=huge &amp;ndash;enable-python3interp=yes &amp;ndash;enable-luainterp &amp;ndash;enable-multibyte &amp;ndash;enable-sniff &amp;ndash;enable-fontset 如果能编译出Python的so库</description>
    </item>
    
    <item>
      <title>SQLite分析</title>
      <link>/post/190121/</link>
      <pubDate>Mon, 21 Jan 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190121/</guid>
      <description>SQLite指针是个很大的结构，包含vfs和Db结构。允许attach特性，可以同时有多个数据库，因此DB成员是数组，每个DB的最关键结构是</description>
    </item>
    
    <item>
      <title>RTSP笔记</title>
      <link>/post/190110/</link>
      <pubDate>Thu, 10 Jan 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190110/</guid>
      <description>RTSP支持RTP/AVP, RTP/AVP/TCP两种传输模式的，前者也可以写作RTP/AVP/UDP，这种模式因为是UDP传输，客户端会携</description>
    </item>
    
    <item>
      <title>环境变量的继承</title>
      <link>/post/190108/</link>
      <pubDate>Tue, 08 Jan 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190108/</guid>
      <description>操作系统有一片空间保存环境变量，我猜测这只是一片只读空间，每次用户登陆会创建一个会话，这个会话首先继承了全局的全局变量，如果脚本中expor</description>
    </item>
    
    <item>
      <title>TinyScheme的运行过程</title>
      <link>/post/190105/</link>
      <pubDate>Sat, 05 Jan 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190105/</guid>
      <description>其前身是MiniScheme，代码量不到2500行，大量使用全局变量，风格算不上好，但对于trace来说很方便。 car和cdr是lisp系最</description>
    </item>
    
    <item>
      <title>网段与路由</title>
      <link>/post/190103/</link>
      <pubDate>Thu, 03 Jan 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/190103/</guid>
      <description>对于私网地址的规范，在RFC 1918 - Address Allocation for Private Internets里有完整的规范定义。其中A类，B类，C类网段各取了一部分： 10.0.0.0/8 (255.0.0.0) 172.16.0.0/12 (255.240.0.0) 192.168.0.0/16 (255.255.0.0) 192的私有</description>
    </item>
    
    <item>
      <title>并不神秘的深度优先搜索</title>
      <link>/post/181230/</link>
      <pubDate>Sun, 30 Dec 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181230/</guid>
      <description>在图中搜索到某个点的路径，把图映射成一张二维数组，每个坐标的值，区分障碍物，未走过，已走过等状态。 深度优先的核心思路还是递归的应用，先确定下</description>
    </item>
    
    <item>
      <title>大华视频云框架</title>
      <link>/post/181121/</link>
      <pubDate>Wed, 21 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181121/</guid>
      <description>PaaS/IaaS八大服务群 容器 云存储 云数据库/数仓 挖掘/图数据库 图像识别，智能分析 视频/接入 中间件 运维 中间件，视频，运维必须，其它都是选配</description>
    </item>
    
    <item>
      <title>音视频解码器的特性</title>
      <link>/post/181120/</link>
      <pubDate>Tue, 20 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181120/</guid>
      <description>音频解码有指标 比特率范围 输入通道 比特率范围，典型如MP3是8k到320k，FLAC会有1到2^31全覆盖。 通道数大抵越低端，用于通信的越少，</description>
    </item>
    
    <item>
      <title>FLTK编译历程</title>
      <link>/post/181117/</link>
      <pubDate>Sat, 17 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181117/</guid>
      <description>为了跨平台，Windows用了GDI，Mac用Quartz，Unix用X11。Fl::scheme可以简单地设置风格，效果一般。 要想编译后的</description>
    </item>
    
    <item>
      <title>C语言的HTTP请求</title>
      <link>/post/181116/</link>
      <pubDate>Fri, 16 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181116/</guid>
      <description>在windows上写HTTP请求，遇到问题很多。 头文件要用winsock2.h，且必须调用WSAStartup，另外还要链接ws2_32库。</description>
    </item>
    
    <item>
      <title>论为什么CSS难学</title>
      <link>/post/181110/</link>
      <pubDate>Sat, 10 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181110/</guid>
      <description>很多人以为CSS是给DOM元素设置属性（attribute），其实CSS规定的并不是属性，而是行为（behavior），DOM里的每个元素都</description>
    </item>
    
    <item>
      <title>字符编码与字体映射</title>
      <link>/post/181103/</link>
      <pubDate>Sat, 03 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181103/</guid>
      <description>早期计算机的字符编码基本上都是6位。所以早期计算机的整形的字长一般是6的倍数，如18位、24位、36位等。1963年公布的ASCII码是第一</description>
    </item>
    
    <item>
      <title>Web单页和跳转</title>
      <link>/post/181101/</link>
      <pubDate>Thu, 01 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181101/</guid>
      <description>思考开放平台的网页呈现方式，基于已经有若干md文件，怎么去呈现。基本的想法是目录中放html文件，以静态方式来获取，完全不需要一行代码，但是</description>
    </item>
    
    <item>
      <title>视频的封装格式</title>
      <link>/post/181028/</link>
      <pubDate>Sun, 28 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181028/</guid>
      <description>ES（Elementary Stream）流是基本码流，包含音频、视频、数据的连续码流。编码器输出的都是这种类型。 PES（Packet Elementary Str</description>
    </item>
    
    <item>
      <title>跨域和同源策略</title>
      <link>/post/181027/</link>
      <pubDate>Sat, 27 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181027/</guid>
      <description>浏览器的三大线程 javascript引擎线程(GUI渲染也在这个线程) 浏览器事件触发线程 HTTP请求线程 问题是这样：在localhost页面</description>
    </item>
    
    <item>
      <title>HLS取流</title>
      <link>/post/181026/</link>
      <pubDate>Fri, 26 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181026/</guid>
      <description>HLS是HTTP Streaming传输视频的一种，由Apple提出，另外3GPP，微软和Adobe也有类似的技术，由于iPhone太强势，使</description>
    </item>
    
    <item>
      <title>Graphviz使用说明</title>
      <link>/post/181025/</link>
      <pubDate>Thu, 25 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181025/</guid>
      <description>一个包含常用元素的dot示例，中文用UTF8编码，但不能首字母用中文，可以用空格规避。 digraph abc { rankdir=LR graph [bgcolor=&amp;quot;gray&amp;quot;] node [shape=box, fontname=&amp;quot;simsun&amp;quot;] edge [color=&amp;quot;darkgreen&amp;quot;, fontname=&amp;quot;Microsoft YaHei&amp;quot;]; box1 [shape=record, label=&amp;quot; 中文1&amp;quot;, fontname=&amp;quot;simhei&amp;quot;]</description>
    </item>
    
    <item>
      <title>视频云的域和组织</title>
      <link>/post/181022/</link>
      <pubDate>Mon, 22 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181022/</guid>
      <description>域有两个含义完全不同的英文单词 domain 指SaaS层的一组服务集，通常指一个下级平台 region 指PaaS层包括但不限于设备接入，存储，流转发等服务集 一个do</description>
    </item>
    
    <item>
      <title>【转】对PHP的分析</title>
      <link>/post/181021/</link>
      <pubDate>Sun, 21 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/181021/</guid>
      <description>我不考虑可以用封装库解决的问题，比如不考虑 JSON api，in_array 默认 == 等等 我不考虑各种 VM 实现的问题，比如 C 扩展常驻内存 我不考虑 PHP 文档的问</description>
    </item>
    
    <item>
      <title>自制编程语言的历程</title>
      <link>/post/180923/</link>
      <pubDate>Sun, 23 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180923/</guid>
      <description>尽管还存在缺陷，即便如此从9月16号开始重新启程，已经比过往强得太多。大约从2009年便有实现一门语言的想法，一直折磨我不堪，如今看到希望，</description>
    </item>
    
    <item>
      <title>指针的三种面貌</title>
      <link>/post/180920/</link>
      <pubDate>Thu, 20 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180920/</guid>
      <description>起因是同事发了一段C语言的汇编代码，理解不透，代码如下 ifAddrSt = ifAddrSt-&amp;gt;ifa_next; 0x00000000004006a5 &amp;lt;+221&amp;gt;: mov -0x10(%rbp),%rax 0x00000000004006a9 &amp;lt;+225&amp;gt;: mov (%rax),%rax 0x00000000004006ac &amp;lt;+228&amp;gt;: mov %rax,-0x10(%rbp) 能看出把rbp-10位置上的值做了一通操作后赋值回自身，</description>
    </item>
    
    <item>
      <title>用数组实现链表</title>
      <link>/post/180910/</link>
      <pubDate>Mon, 10 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180910/</guid>
      <description>为每个链表元素分配一次空间对有洁癖的我来说太过累赘，更倾向用数组的连续性来得到这个特性。 直到看到s9的实现，才明白该其中决窍，引入一个和真实</description>
    </item>
    
    <item>
      <title>词法语法之后</title>
      <link>/post/180905/</link>
      <pubDate>Wed, 05 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180905/</guid>
      <description>以前写过3篇词法语法工具使用的记录，对完整的编译过程来说，后面的代码生成和执行却一直忽略了。 如果只是写计算器，到语法生成勉强还够用。但要想支</description>
    </item>
    
    <item>
      <title>伊斯兰国家的传承</title>
      <link>/post/180902/</link>
      <pubDate>Sun, 02 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180902/</guid>
      <description>世说穆罕默德雄才伟略，不得观。但死后四大哈里发不得善终者二，并不稳固。按时间线共有3个大的王朝分别是： 倭马亚王朝，白衣大食，逊尼派，661-</description>
    </item>
    
    <item>
      <title>GB28181理解</title>
      <link>/post/180901/</link>
      <pubDate>Sat, 01 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180901/</guid>
      <description>全称由3个词组合，安全防范，视频监控，联网系统。视频监控领域的通用标准，用了信令SIP和媒体RTP/RTCP的模型。选用SIP是有多重原因 视</description>
    </item>
    
    <item>
      <title>一次反汇编的崩溃定位</title>
      <link>/post/180829/</link>
      <pubDate>Wed, 29 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180829/</guid>
      <description>将设备搜索功能从子节点迁移到管理节点，虽然程序没有变动，但会出现启动就崩溃问题，重启后不会崩溃。 GDB跟踪发现是死在第三方的so库，直观的解</description>
    </item>
    
    <item>
      <title>消息队列理解</title>
      <link>/post/180819/</link>
      <pubDate>Sun, 19 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180819/</guid>
      <description>本质是为了实现观察者模式提供的一种中间件，串接起生产者和消费者两端。RabbitMQ有Exchange,Binding,Queue,Rout</description>
    </item>
    
    <item>
      <title>UDP和相关操作</title>
      <link>/post/180813/</link>
      <pubDate>Mon, 13 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180813/</guid>
      <description>TCP属于有连接协议，所以一定需要有bind操作。服务端显式bind，客户端在connect时会内OS隐式bind。一直不确定UDP要不要b</description>
    </item>
    
    <item>
      <title>操作系统启动器的故事</title>
      <link>/post/180809/</link>
      <pubDate>Thu, 09 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180809/</guid>
      <description>让我们看看几大主流操作系统的启动区别。 启动顺序的差异 Windows是先认硬盘，再从硬盘分辨分区，其中系统分区中找到ntldr并引导。 Linu</description>
    </item>
    
    <item>
      <title>版本管理工具的历程</title>
      <link>/post/180805/</link>
      <pubDate>Sun, 05 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180805/</guid>
      <description>到今天为止，版本管理工具可以粗略地分为三代： SCCS在1972年开创了版本管理的理念，最初是用SNOBL4开发，后来借着Unix的东风，以C</description>
    </item>
    
    <item>
      <title>电话协议的发展</title>
      <link>/post/180801/</link>
      <pubDate>Wed, 01 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180801/</guid>
      <description>写这篇的起因，是确定了SIP协议更直观的翻译应该叫电话初始化协议。Session在IT领域是个很宽泛的词，只表示两者之间持续的一段互动。而话</description>
    </item>
    
    <item>
      <title>Lisp的宏</title>
      <link>/post/180714/</link>
      <pubDate>Sat, 14 Jul 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180714/</guid>
      <description>都说Lisp的宏很强大，其最大的特征仍然是字符串展开和替换，只是在替换的过程中，可以结合环境进行适合的绑定，加之程序和数据的同构，才使它异常</description>
    </item>
    
    <item>
      <title>我司组件化的优劣</title>
      <link>/post/180710/</link>
      <pubDate>Tue, 10 Jul 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180710/</guid>
      <description>类型剖析 组件化在不同的领域有不同的含义，应用在远程管理相机这个领域，最大的优点是两条，生命周期管理和RPC访问。相对较弱的还有弱链接，但这更</description>
    </item>
    
    <item>
      <title>Shell编程说明</title>
      <link>/post/180706/</link>
      <pubDate>Fri, 06 Jul 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180706/</guid>
      <description>解析顺序与转义 和函数调用类似，一条命令行的多个部分会在不同阶段解析。先判断整行是简单命令还是复合命令，每条简单命令的参数会先解析，像glob</description>
    </item>
    
    <item>
      <title>Lisp文章读后感</title>
      <link>/post/180702/</link>
      <pubDate>Mon, 02 Jul 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180702/</guid>
      <description>RethinkDB作者的理解，从XML，C语言宏等角度作了比喻。 XML是一种数据表示，但Ant中可以表示行为。如果把尖括号和属性(只是为了少</description>
    </item>
    
    <item>
      <title>socket与网络概念</title>
      <link>/post/180621/</link>
      <pubDate>Thu, 21 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180621/</guid>
      <description>socket函数声明传入3个值，依次是domain/type/protocol。域最大，然后是类型，比如连接/无连接/原始等，最后是协议种类</description>
    </item>
    
    <item>
      <title>【译】Eiffel之路</title>
      <link>/post/180618/</link>
      <pubDate>Mon, 18 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180618/</guid>
      <description>这是一篇开放式地讨论SP和OO的文章(a free ranging discussion, the reader should view it as a promenade on the border road between SP and OO)。 作者赞成Bottom up甚于Top down设计。不该忘记</description>
    </item>
    
    <item>
      <title>明朝与文官集团</title>
      <link>/post/180615/</link>
      <pubDate>Fri, 15 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180615/</guid>
      <description>对明史的一些理解，不贴史料更多是一些论述性的东西。 明太祖立国大杀功臣集团，对官僚集团也是异常残酷，俸禄为历朝最少，剥皮实草戴枷上堂都是只在这</description>
    </item>
    
    <item>
      <title>写文件的一些特性</title>
      <link>/post/180612/</link>
      <pubDate>Tue, 12 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180612/</guid>
      <description>先创建一个分区，方式如下 dd if=/dev/zero of=./dummy count=204800 创建一个普通文件，用file看类型是data mkfs.ext4 ./dummy 会提示不是个block special device，是否要继续。选Y继续。</description>
    </item>
    
    <item>
      <title>论RESTFul特性</title>
      <link>/post/180609/</link>
      <pubDate>Sat, 09 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180609/</guid>
      <description>产生RESTFul的领域，似乎不能涵盖API风格。要求URL以名词性单词结尾，典型的比如心跳，要作为什么样的资源呢？也许可以强作令牌，但其它</description>
    </item>
    
    <item>
      <title>Scheme的几个实现Gambit/Chibi/Chicken</title>
      <link>/post/180606/</link>
      <pubDate>Wed, 06 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180606/</guid>
      <description>Gambit和Chicken都是能把Scheme编译成C源码的实现(另外还有Bigloo)。 Gambit 两个主要执行程序：gsi和gsc，gsi是执行</description>
    </item>
    
    <item>
      <title>实战flex和lemon要点</title>
      <link>/post/180510/</link>
      <pubDate>Thu, 10 May 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180510/</guid>
      <description>以前写过flex和bison的实战，这两个工具出现在70年代，bison生成的主函数入口名只能是int yyparse(),内部强制调用yyl</description>
    </item>
    
    <item>
      <title>JS模块化历史</title>
      <link>/post/180501/</link>
      <pubDate>Tue, 01 May 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180501/</guid>
      <description>在2009年1月，Mozilla的程序员Kevin Dangoor发起了名为ServerJS动议，这是最早的模块规范。同年8月更名为Commo</description>
    </item>
    
    <item>
      <title>浏览器对文件的处理</title>
      <link>/post/180421/</link>
      <pubDate>Sat, 21 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180421/</guid>
      <description>协议工作经常遇到Web开发问及如何处理二进制数据的问题，查了资料并记录。 最早的HTML浏览器实现，是李在1990年实做的，IETF在93年中</description>
    </item>
    
    <item>
      <title>论`C&#43;&#43;`类的访问控制符</title>
      <link>/post/180413/</link>
      <pubDate>Fri, 13 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180413/</guid>
      <description>C++类的public/private是范围式的，从一个声明符直到下一个声明符之间的所有变量、函数的可访问性是一样的。而Java是针对每个函</description>
    </item>
    
    <item>
      <title>JS和AWK语言的new和delete</title>
      <link>/post/180410/</link>
      <pubDate>Tue, 10 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180410/</guid>
      <description>new 在JavaScript中，使用new关键字后，意味着做了如下四件事情： 创建一个新的对象，这个对象的类型是object； 设置这个新的对象的内</description>
    </item>
    
    <item>
      <title>Lua的Continuation</title>
      <link>/post/180409/</link>
      <pubDate>Mon, 09 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180409/</guid>
      <description>静下心来看冯东的讲解，才终于明白stackless指的是：lua语言的执行不会导致宿主语言的栈增长，同时luaV_execute的一次执行就</description>
    </item>
    
    <item>
      <title>冯东的Lua</title>
      <link>/post/180406/</link>
      <pubDate>Fri, 06 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180406/</guid>
      <description>Lua vs. Python 在《 Programming in Lua 》系列里谈了 Lua 的 stackless 实现。说到 stackless 设计，难免和 Python 的 stackful 实现比较一下。 以前总有一个疑惑。为什么 Python 既要采用 native thread，又要用 great-lock 将其</description>
    </item>
    
    <item>
      <title>YXcms和CanPHP的结合</title>
      <link>/post/180405/</link>
      <pubDate>Thu, 05 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180405/</guid>
      <description>以前写过一篇URL路由，提到YXcms的解析思路，分析整体代码的思路。 CanPHP的结构很清晰，分core/lib/ext三个目录，lib是</description>
    </item>
    
    <item>
      <title>《JS语言精粹》学习记录</title>
      <link>/post/180401/</link>
      <pubDate>Sun, 01 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180401/</guid>
      <description>知乎上看的，融合了自己的理解。 第一章 精华 JavaScript有很多优秀的想法也有糟粕； 优秀的想法在于：弱类型，函数，动态对象和富有想象的对象</description>
    </item>
    
    <item>
      <title>安卓APK内容分析</title>
      <link>/post/180320/</link>
      <pubDate>Tue, 20 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180320/</guid>
      <description>压缩包的文件构成 最小的apk会有classes.dex/AndroidManifest.xml/resources.arsc文件和asset</description>
    </item>
    
    <item>
      <title>AndroLua记录</title>
      <link>/post/180316/</link>
      <pubDate>Fri, 16 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180316/</guid>
      <description>一个在Android用lua开发程序的应用，利用了JNI技术。JNI的交互是在java中定义若干个native方式的接口，通过javah导出</description>
    </item>
    
    <item>
      <title>行人卡口事件的思考</title>
      <link>/post/180305/</link>
      <pubDate>Mon, 05 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180305/</guid>
      <description>问题是什么 收到智能交通产品线增加行人卡口的需求，此前协议中已经有名为HumanTrait的事件，表示视频画面中出现了人。第一感觉就是行人卡口</description>
    </item>
    
    <item>
      <title>PHP的一些语言特性</title>
      <link>/post/180219/</link>
      <pubDate>Mon, 19 Feb 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180219/</guid>
      <description>PHP作为一门动态语言，一些动态特性让人印象深刻。 首先是字符串可以在一定程度表示函数。比如spl_autoload_register函数传入</description>
    </item>
    
    <item>
      <title>查询协议与资源回收</title>
      <link>/post/180209/</link>
      <pubDate>Fri, 09 Feb 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180209/</guid>
      <description>遇到一个查询业务资源未回收的问题。查询的返回数量不确定，因此会有同步和异步的方式考虑有两种返回形式。如果是异步，在查询前传入一个回调函数，所</description>
    </item>
    
    <item>
      <title>小鲜4刷机反思</title>
      <link>/post/180129/</link>
      <pubDate>Mon, 29 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180129/</guid>
      <description>上周买了一个安卓机，事先查好各种资料确定可以刷机才下的订单。然后到手后足足用了5天才线刷成功。 第一天徒劳无功地反复操作软件、装驱动各种瞎折腾</description>
    </item>
    
    <item>
      <title>人脸查询协议的理解</title>
      <link>/post/180119/</link>
      <pubDate>Fri, 19 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180119/</guid>
      <description>一个人脸查询协议反复看了大半年，每次看都有新的体会，直到现在我也不确信是不是完整理解它。 人脸比对涉及两种对像，历史库和注册库，保存的虽然都是</description>
    </item>
    
    <item>
      <title>安卓root原理小记</title>
      <link>/post/180112/</link>
      <pubDate>Fri, 12 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180112/</guid>
      <description>最重要的两个分区system和data，这两分区默认只读，因此不能删除预装程序。要设法把su写到system分区，最好还要有daemonsu</description>
    </item>
    
    <item>
      <title>使用DroidScript开发安卓程序</title>
      <link>/post/180101/</link>
      <pubDate>Mon, 01 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/180101/</guid>
      <description>本来是想用ionic在手机上做些开发，但不知什么原因安装失败，发现一个叫DroidScript的安卓程序，可以在PC端浏览器连接手机，并在浏</description>
    </item>
    
    <item>
      <title>《杀戮与文明》读后感</title>
      <link>/post/171230/</link>
      <pubDate>Sat, 30 Dec 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171230/</guid>
      <description>这是一本相当西方自豪主义的书，写得很啰嗦很冗长，但揭示的理由还是值得看看。整本书为三大部分，创造、延续和控制。 创造部分讲了三个希腊罗马时代的</description>
    </item>
    
    <item>
      <title>音频与声道的一些基本概念</title>
      <link>/post/171222/</link>
      <pubDate>Fri, 22 Dec 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171222/</guid>
      <description>起因从一个对讲的bug说起。客户端在语音对讲时，一直发送的是双声道的音频文件，设备管理也按双声道解码，结果最近一款设备却实现成了只能解码单声</description>
    </item>
    
    <item>
      <title>几个安卓ROM的体验报告</title>
      <link>/post/171205/</link>
      <pubDate>Tue, 05 Dec 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171205/</guid>
      <description>因为手欠把flyme的stk.apk(SIM程序)删除之后，一直报com.android.phone停止运行，加上flyme用了两年也有些厌</description>
    </item>
    
    <item>
      <title>修改能力协议的思考</title>
      <link>/post/171204/</link>
      <pubDate>Mon, 04 Dec 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171204/</guid>
      <description>对一个视频通道获取智能能力的协议，原来的协议只有一条能力，这种描述不足在于能力有当前能力和潜在能力，嵌入式设备的能力不是孤立的，会受制于其它</description>
    </item>
    
    <item>
      <title>一个加密协议定义不仔细的教训</title>
      <link>/post/171201/</link>
      <pubDate>Fri, 01 Dec 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171201/</guid>
      <description>前天下午NetSDK组反馈在AES加密时数据，客户端和服务端对正文的padding采用了不一样的加密方式，导致无法解密。当时就觉得很蹊跷明明</description>
    </item>
    
    <item>
      <title>《天朝的崩溃》读后感</title>
      <link>/post/171130/</link>
      <pubDate>Thu, 30 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171130/</guid>
      <description>草草地看完茅海建先生的天朝的崩溃一书，这本书有500多页，因为时间的关系，只看到其中的一大半的章节，现在留下来的都是一些情绪上的一些记忆。 我</description>
    </item>
    
    <item>
      <title>MySQL和Redis备忘</title>
      <link>/post/171129/</link>
      <pubDate>Wed, 29 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171129/</guid>
      <description>MySQL可以远程访问，支持Unix的域套接字、Windows的共享内存和命名管道模式以及应用最广的TCP。TCP协议的首字节是版本号，官方</description>
    </item>
    
    <item>
      <title>比较词法分析和语法分析</title>
      <link>/post/171110/</link>
      <pubDate>Fri, 10 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171110/</guid>
      <description>词法分析是一种单向的状态机。最简单的词法分析，只要不停的吞入字符并和状态表中的可选项进行匹配，并把匹配上的字符挑选出来就可以了。稍微复杂一点</description>
    </item>
    
    <item>
      <title>我国省份行政编码规则</title>
      <link>/post/171023/</link>
      <pubDate>Mon, 23 Oct 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171023/</guid>
      <description>每个人身份证的前两位(企业则是社会信用代码)表示省份，比如上海是31，北京是11。省、地、市县这三级行政区划代码，从1982年到2007年，</description>
    </item>
    
    <item>
      <title>回看晚清七十年历史</title>
      <link>/post/171015/</link>
      <pubDate>Sun, 15 Oct 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171015/</guid>
      <description>小时候因为清朝是满族统治关系，非常不愿意学。现在回看这段整个民族在转型过程中的历程，颇为沧桑。 晚清的界定通常从第一次鸦片战争开始，到辛亥革命</description>
    </item>
    
    <item>
      <title>两个嵌入式JS引擎的介绍</title>
      <link>/post/171010/</link>
      <pubDate>Tue, 10 Oct 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/171010/</guid>
      <description>最近在开发一个协议转换工作，脚本决定使用JavaScript。JS的实现非常得多，除了浏览器里那些重型武器，还有非常多小型的实现版本，大多都</description>
    </item>
    
    <item>
      <title>实战flex和bison注意事项</title>
      <link>/post/170928/</link>
      <pubDate>Thu, 28 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170928/</guid>
      <description>日常处理协议要做太多的转换工作，想试着能否用类似google的proto描述方式来自动化生成。决定用flex和bison再配合一个scrip</description>
    </item>
    
    <item>
      <title>Lua中元表的理解</title>
      <link>/post/170921/</link>
      <pubDate>Thu, 21 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170921/</guid>
      <description>从题外话说起，Lua在语言虽然没有class关键字，但不妨碍它是一门OO的语言，只是归属到object-based这个类别下(JS是这个流派</description>
    </item>
    
    <item>
      <title>动态链接库与符号表</title>
      <link>/post/170920/</link>
      <pubDate>Wed, 20 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170920/</guid>
      <description>起因是前天向吴惠敏请教gprofile的时候，这个工具要用.a库，不要用.so否则程序会挂掉，原因是gprofile的设计思想在20年前就已</description>
    </item>
    
    <item>
      <title>千岛湖公司旅游</title>
      <link>/post/170917/</link>
      <pubDate>Sun, 17 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170917/</guid>
      <description>这周五部门组织去千岛湖旅游，再不去就只能杭州一日游了，加上毕竟是和自己组一起去，路上好歹有个伴。周五吃过中饭出发，大概花了两个半小时入住千岛</description>
    </item>
    
    <item>
      <title>为什么C语言的long类型长度不确定</title>
      <link>/post/170914/</link>
      <pubDate>Thu, 14 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170914/</guid>
      <description>C语言的规范没有规定long必须是多长，只要求不小于int就可以。从我看到的情况int都是4字节，但long就有32/64两种长度。典型的像</description>
    </item>
    
    <item>
      <title>面向对象中的类与应用场景</title>
      <link>/post/170908/</link>
      <pubDate>Fri, 08 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170908/</guid>
      <description>记得我刚学C++的时候，第一眼记住的特性就是引入了class关键字，但是由于一直以来的工作，更多是以C语言为主，自己编码也很少用到类，只能把</description>
    </item>
    
    <item>
      <title>给应届生出题看指针的易错点</title>
      <link>/post/170905/</link>
      <pubDate>Tue, 05 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170905/</guid>
      <description>上周领到给18届毕业生出题目，我被分到OS方面的基本题和两道编程题，基本题不能简单考能查到的题目，最后出了几个Linux偏操作的题目。两道编</description>
    </item>
    
    <item>
      <title>SHA家族的哈希算法</title>
      <link>/post/170831/</link>
      <pubDate>Thu, 31 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170831/</guid>
      <description>由于MD5早就被证明存在碰撞攻击，安全性在严肃场合肯定是不够的，SHA-1(160bit)作为替代品已被越来越多的观点认可，但是MD5有一个</description>
    </item>
    
    <item>
      <title>Bitcoin中三种哈希的区别与关联</title>
      <link>/post/170829/</link>
      <pubDate>Tue, 29 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170829/</guid>
      <description>区块链的不可篡改性是基于哈希函数的特性，Bitcoin中有3个地方用到了哈希的特性(都是SHA256)，分别是区块的哈希、区块的merkle</description>
    </item>
    
    <item>
      <title>处理权限校验问题的反思</title>
      <link>/post/170826/</link>
      <pubDate>Sat, 26 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170826/</guid>
      <description>公司产品的权限校验问题做了半年，前期我没有参与，最近因为人员调整所以换我来继续处理。说实话对于嵌入式产品却有多达6、70种权限的历史遗留问题</description>
    </item>
    
    <item>
      <title>【翻译】select的历史和epoll的不足</title>
      <link>/post/170822/</link>
      <pubDate>Tue, 22 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170822/</guid>
      <description>5种IO模型 阻塞IO 非阻塞IO 多路复用 信号驱动 异步IO 阻塞IO不提，非阻塞IO只是减少了从请求发出到真正开始读的时间，但把数据从内核读到应用</description>
    </item>
    
    <item>
      <title>libuv代码走读</title>
      <link>/post/170820/</link>
      <pubDate>Sun, 20 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170820/</guid>
      <description>虽然并不提供Makefile，但通过CMake的脚本很容易就把要编译的文件找到，编译宏只有两个。 uv的核心是loop，加上两个父级的抽象类型</description>
    </item>
    
    <item>
      <title>如何在struct里追加指针</title>
      <link>/post/170818/</link>
      <pubDate>Fri, 18 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170818/</guid>
      <description>这在其它公司或开源项目没有什么用，但至少在我目前的工作上还是有一定价值的。想象一下不同的部门共用同一份头文件，头文件中复杂的类型只能用结构体</description>
    </item>
    
    <item>
      <title>RSA/DSA/EC三种算法记录</title>
      <link>/post/170816/</link>
      <pubDate>Wed, 16 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170816/</guid>
      <description>从Openssl的命令行操作来一探这三种非对称加密的端倪。三者的操作命令并不对称，支持的列表如下 RSA：genrsa/rsa/rsautl D</description>
    </item>
    
    <item>
      <title>重新认识Makefile</title>
      <link>/post/170814/</link>
      <pubDate>Mon, 14 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170814/</guid>
      <description>不要片面地把Makefile理解成程序编译工具，更广义地说是个基于文件依赖关系的管理工具。可以通过make制定规则、调用shell命令，也可</description>
    </item>
    
    <item>
      <title>flex和bison的理解</title>
      <link>/post/170808/</link>
      <pubDate>Tue, 08 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170808/</guid>
      <description>这两个工具是编译理论都会介绍的经典工具，分别用于词法和语法分析。词法比较简单，虽然有NFA和DFA的区分，但总的来说就是把原子的字符按规则合</description>
    </item>
    
    <item>
      <title>区块链的运行机制</title>
      <link>/post/170806/</link>
      <pubDate>Sun, 06 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170806/</guid>
      <description>区域链本质上是一种由交易驱动的，由共识确认并跃迁的状态机。区块链由区块以单向链表方式连接，并利用哈希的特性保证了数据的不可篡改性。 交易可以是</description>
    </item>
    
    <item>
      <title>英语的谓语、表语和动词</title>
      <link>/post/170802/</link>
      <pubDate>Wed, 02 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170802/</guid>
      <description>英语五大基本句型和人类历史发展史是完全一样的 主谓就是一个男人和一个女人； 主谓宾就是一个男人和一个女人生个孩子； 一个孩子太寂寞再生一个就是主谓</description>
    </item>
    
    <item>
      <title>如何更好地思考</title>
      <link>/post/170730/</link>
      <pubDate>Sun, 30 Jul 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170730/</guid>
      <description>这个题目很大，慢慢补充。要学会正确地思考，不被欺骗(不被收智商税)，就一定要提升自己的认知能力。大脑是一切认知的根源，所以必须先从理解这个部</description>
    </item>
    
    <item>
      <title>wren语言记录</title>
      <link>/post/170728/</link>
      <pubDate>Fri, 28 Jul 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170728/</guid>
      <description>一门很小且很快的语言，EOS的作者BM对wren语言非常推崇，并整合到EOS中。 下载源码后先到src目录下看看wren的代码结构。目录结构很</description>
    </item>
    
    <item>
      <title>使用xapian和scws进行全文检索</title>
      <link>/post/170707/</link>
      <pubDate>Fri, 07 Jul 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170707/</guid>
      <description>中文的全文检索最难的是分词，暂时只有scws结合xapian能跑起来。scws是个分词库，用在生成倒排索引阶段，建立索引和查询还是要利用xa</description>
    </item>
    
    <item>
      <title>云升级项目的反思</title>
      <link>/post/170621/</link>
      <pubDate>Wed, 21 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170621/</guid>
      <description>这个项目大概是我在大华经历最失败的项目了，因为不确定最初的需求到底是什么，我自己的理解应该只是客户无法下载升级包，如果是这样提供工具可以 下载</description>
    </item>
    
    <item>
      <title>从Javascript函数类型理解计算和对象</title>
      <link>/post/170620/</link>
      <pubDate>Tue, 20 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170620/</guid>
      <description>对任何程序语言来说，函数的设计是最核心的特质，函数涉及的变量作用域、参数的值和引用语义这些基础概念体现了语言设计的核心价值。JS的原则是一切</description>
    </item>
    
    <item>
      <title>礼让行人和车流量协议问题反思</title>
      <link>/post/170613/</link>
      <pubDate>Tue, 13 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170613/</guid>
      <description>礼让行人协议的问题是，在说明时忽略了背景介绍。原文是这样的 Direction : [&amp;quot;Left&amp;quot;, &amp;quot;Right&amp;quot;]; Left表示向左，Right表示向右，数组为空表示表示不关心方向，即行人即</description>
    </item>
    
    <item>
      <title>dmesg和BSD初期版本的故事</title>
      <link>/post/170610/</link>
      <pubDate>Sat, 10 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170610/</guid>
      <description>dmesg最早出现在3BSD时代。 1975年Ken Thompson请了一年休假并来到Berkeley担任客座教授，Ken在Berkeley安</description>
    </item>
    
    <item>
      <title>灯光和相机差异的关联和协议需求</title>
      <link>/post/170608/</link>
      <pubDate>Thu, 08 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170608/</guid>
      <description>不同相机对灯光的需求差异很大，交通相机、普通IPC、球式相机都有各自的特点。 比如交通相机工作重点在于车牌抓拍，最主要的就是如何把车牌拍清晰，</description>
    </item>
    
    <item>
      <title>从串口功能的封装看如何抽象</title>
      <link>/post/170604/</link>
      <pubDate>Sun, 04 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170604/</guid>
      <description>串口并不是不可分割的一体，就好像网络socket的TCP和UDP是差异巨大的两个类别，232和485的差别也是非常之大。之所以会混为一谈，只</description>
    </item>
    
    <item>
      <title>PPT到底做什么</title>
      <link>/post/170601/</link>
      <pubDate>Thu, 01 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170601/</guid>
      <description>不是动画也不是美学，是观点以合理的逻辑顺便呈现。 提到Jobs在第一代iPhone发布会上，三种功能因为是并列关系，不能以开门的方式展现。也许</description>
    </item>
    
    <item>
      <title>Word的标题样式和多级列表关系</title>
      <link>/post/170531/</link>
      <pubDate>Wed, 31 May 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170531/</guid>
      <description>对一篇有结构层次的文档而言，章节标题的编号是很重要的，它能很直观地给出这部分内容在整个文章中的位置和前后关系。虽然通过给标题刷上样式，也能出</description>
    </item>
    
    <item>
      <title>组件化与线程模型及缺陷</title>
      <link>/post/170530/</link>
      <pubDate>Tue, 30 May 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170530/</guid>
      <description>今天夏杰和我看了他的PPT，讲到组件化在实现过程中留下的缺点，很值得反思。 组件化以类为单位，并提供接口给外部操作。这种开发模式更像是提供一堆</description>
    </item>
    
    <item>
      <title>从ifconfig接口看网卡</title>
      <link>/post/170526/</link>
      <pubDate>Fri, 26 May 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170526/</guid>
      <description>网络工具包的变迁 ifconfig/route/netstat/arp/rarp等网络管理经典软件（属于net-tools包），起源于BSD T</description>
    </item>
    
    <item>
      <title>网络相关头文件所属目录的关系</title>
      <link>/post/170525/</link>
      <pubDate>Thu, 25 May 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170525/</guid>
      <description>unix下的网络文件分布的目录比较多，初看会觉得很乱且难记，试着整理一下。 本着unix下一切皆文件，所有的网络操作都通过抽象的socket操</description>
    </item>
    
    <item>
      <title>OpenBSD学习与使用</title>
      <link>/post/170516/</link>
      <pubDate>Tue, 16 May 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170516/</guid>
      <description>系统分为内核文件和应用层套件，根目录下放置启动器boot和内核文件bsd，对一些支持多核的芯片，会另有bsd.mp文件，但不清楚此时bsd是</description>
    </item>
    
    <item>
      <title>P2P及SIP和xinetd</title>
      <link>/post/170429/</link>
      <pubDate>Sat, 29 Apr 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170429/</guid>
      <description>P2P穿透涉及的协议有STUN/TURN/ICE，STUN是真正的UDP打洞，但只适用于cone NAT的网络环境下(完全、限制、端口限制三种</description>
    </item>
    
    <item>
      <title>协议是什么，要定义什么</title>
      <link>/post/170424/</link>
      <pubDate>Mon, 24 Apr 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170424/</guid>
      <description>定义和期望 每一个软件只要不是像HelloWorld那样纯入门性质的软件，它一定承载了某种功能，想让它完成某种功能就要有固定的格式，这种格式便</description>
    </item>
    
    <item>
      <title>对《谈谈架构》的理解</title>
      <link>/post/170423/</link>
      <pubDate>Sun, 23 Apr 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170423/</guid>
      <description>以下是《谈谈架构》这本书的目录，内容没有看，但从目录上已经有很多启发。 第一部分 认识架构 第 1 章 生命周期 1.1 生命周期的识别 1.2 核心与非核心生命周期 1.3</description>
    </item>
    
    <item>
      <title>练习健身纪要</title>
      <link>/post/170421/</link>
      <pubDate>Fri, 21 Apr 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170421/</guid>
      <description>外行看腹，新手看胸，高手看背，大师看腿。 练胸大肌脖子会疼的原因 发力时使用了后背的斜方肌，左右斜方肌力量不平衡，挤压颈椎。 推时腰部会发力，后腰</description>
    </item>
    
    <item>
      <title>HTTP2特性学习</title>
      <link>/post/170405/</link>
      <pubDate>Wed, 05 Apr 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170405/</guid>
      <description>HTTP2在制定时要保证不破坏语义且要尽可能地兼容，为了平滑地从HTTP/1.1升级到HTTP/2，会用到Upgrade协议头，但这样就会消</description>
    </item>
    
    <item>
      <title>php-fpm记录</title>
      <link>/post/170403/</link>
      <pubDate>Mon, 03 Apr 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170403/</guid>
      <description>PHP的组成，从内到外大致分3层 解析器核心，在形态上表现成php.dll方式，实质是zend引擎，做语法解析和字节码执行。对应配置php.i</description>
    </item>
    
    <item>
      <title>协议为什么要分包</title>
      <link>/post/170329/</link>
      <pubDate>Wed, 29 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170329/</guid>
      <description>TCP是流式传输协议，每次在传输就要告知对端一个这次数据的长度，否则在流上无从断句。像HTTP就有Content-Length字段用于标识包</description>
    </item>
    
    <item>
      <title>辛弃疾的青玉案赏析</title>
      <link>/post/170325/</link>
      <pubDate>Sat, 25 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170325/</guid>
      <description>这首词最为人熟知的是最后一句，但整首词其实非常有讲究。从后往前解读，最后一句不消多说，为了衬托寻找的那个她，先来个铺垫，于是有蛾儿雪柳黄金缕</description>
    </item>
    
    <item>
      <title>VPN概念解释</title>
      <link>/post/170324/</link>
      <pubDate>Fri, 24 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170324/</guid>
      <description>VPN的本章是把来自不同子网的设备放在同一个子网内，构建虚拟网络。既然要并网，肯定要做身份认证，而PPP点对点协议天生就带认证属性，这也是家</description>
    </item>
    
    <item>
      <title>python自学手册</title>
      <link>/post/170323/</link>
      <pubDate>Thu, 23 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170323/</guid>
      <description>整个执行包是目录不敏感的，比如编译时指定安装目录是/usr/py3/目录，安装后整体移动到/opt/py3/目录后，依然能正常运行。熟用di</description>
    </item>
    
    <item>
      <title>ARQ可靠传输协议</title>
      <link>/post/170318/</link>
      <pubDate>Sat, 18 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170318/</guid>
      <description>TCP是可靠传输协议，但并不是惟一的，甚至在无线环境下都不是最好的选择。可靠传输有三种算法模型: Stop-and-wait ARQ Go-Back-N ARQ Selective Repeat ARQ / Selective Reject TCP是Go-Back-</description>
    </item>
    
    <item>
      <title>Lua中引入对象风格的价值和loop的实现</title>
      <link>/post/170312/</link>
      <pubDate>Sun, 12 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170312/</guid>
      <description>用弱类型语言写代码，函数多了以后参数具备明确含义就很重要了。就好比web开发不可能总是用原生的json包打天下，定义一个类，更多的也是对接口</description>
    </item>
    
    <item>
      <title>GitHub用法记录</title>
      <link>/post/170310/</link>
      <pubDate>Fri, 10 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170310/</guid>
      <description>协作环境很重要的一点要配置自己是谁，git有三个层面的配置local(repo级), global(用户级), system(/etc级)。 推送</description>
    </item>
    
    <item>
      <title>接口设计的原则与反思</title>
      <link>/post/170309/</link>
      <pubDate>Thu, 09 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170309/</guid>
      <description>先说说VideoEncode类的感想， 目前的Encode类的构造函数，需要传入一个视频通道号和编码类型，然后返回一个对象。现阶段遇到有个需求</description>
    </item>
    
    <item>
      <title>C与和ua的交互问题记录</title>
      <link>/post/170308/</link>
      <pubDate>Wed, 08 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170308/</guid>
      <description>环境变量 用Lua写一个库，在单元测试和正常业务上需要导出不同的符号，但是require机制不支持，偶然想到通过环境变量的方式传递，可是lua</description>
    </item>
    
    <item>
      <title>系统性能分析的理解</title>
      <link>/post/170305/</link>
      <pubDate>Sun, 05 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170305/</guid>
      <description>曾经以为性能分析一定要用看起来很高深的工具，实际上重点还是在于对系统各个方面的理解。对《性能之巅》观测指标做个分类，分为软件和硬件，软件类包</description>
    </item>
    
    <item>
      <title>并发和并行</title>
      <link>/post/170304/</link>
      <pubDate>Sat, 04 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170304/</guid>
      <description>先比较两者的定义： 并发是concurrent，指多线程编程存在对同一资源的竞态情况，往往需要加锁操作，Perl6提供了OO::Monitor</description>
    </item>
    
    <item>
      <title>LuaUnit记录</title>
      <link>/post/170301/</link>
      <pubDate>Wed, 01 Mar 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170301/</guid>
      <description>单元测试的条件如果是函数，则首4字母为test，如果是表，则表名和函数名前4字母都为test，均忽略大小写。判断代码 if string.sub(s,1,4):lower() == &amp;lsquo;test&amp;rsquo; then 可以这样来执行</description>
    </item>
    
    <item>
      <title>LuaJIT的编译过程和FFI接口</title>
      <link>/post/170227/</link>
      <pubDate>Mon, 27 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170227/</guid>
      <description>编译LuaJIT比Lua要复杂很多，共分三个步骤。先看src目录下的host目录，首先要编译出host内的minilua，用它驱动dynas</description>
    </item>
    
    <item>
      <title>Openresty的应用开发</title>
      <link>/post/170224/</link>
      <pubDate>Fri, 24 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170224/</guid>
      <description>每个版本都是在nginx的基础上做扩充，所以版本号会多出一位。ngx_lua、memc、srcache都是扩展。自带resty的命令行工具，</description>
    </item>
    
    <item>
      <title>Nginx模块介绍</title>
      <link>/post/170220/</link>
      <pubDate>Mon, 20 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170220/</guid>
      <description>要对Nginx做扩展，都是在nginx.conf里通过命令调用来完成的。 这些命令是归属到某个module中的。命令本身不会显式支持命名空间，</description>
    </item>
    
    <item>
      <title>函数式和对象式，表达式和语句</title>
      <link>/post/170219/</link>
      <pubDate>Sun, 19 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170219/</guid>
      <description>伞哥在微博提到，ML的函数语法如果有多个参数，当参数没有完整传入时，并不是像Lua/PHP等一样赋值为nill，而是返回一个curry化的函</description>
    </item>
    
    <item>
      <title>仔细打磨写过的程序</title>
      <link>/post/170207/</link>
      <pubDate>Tue, 07 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170207/</guid>
      <description>从去年12月到最近，把公司内的AppWiki网站还有这个博客网站的代码，重新进行了调整，颇多感触。 比如代码中早期很多地方因为求快都是Hard</description>
    </item>
    
    <item>
      <title>Lua栈操作记录</title>
      <link>/post/170204/</link>
      <pubDate>Sat, 04 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170204/</guid>
      <description>Lua与C互操作用的是Stack模式，1表示底部，-1表示顶部。除了push/pop还有 lua_insert,lua_remove,lua_</description>
    </item>
    
    <item>
      <title>CSS的一些理解</title>
      <link>/post/170203/</link>
      <pubDate>Fri, 03 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170203/</guid>
      <description>写在前面的话 HTML是SGML/XML的一种特殊应用或者说DSL， 标准的网页写法是，与之对照的DocBook的首行写法是，而SVG图像的写法</description>
    </item>
    
    <item>
      <title>procfs记录</title>
      <link>/post/170202/</link>
      <pubDate>Thu, 02 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170202/</guid>
      <description>procfs诞生于1984年的Unix第8版，愿望是对ptrace的一种改良。起初是每个进程对应一个文件，经过Plan9改造成伪文件系统，且</description>
    </item>
    
    <item>
      <title>Lua中udata设置元表机制和回调</title>
      <link>/post/170125/</link>
      <pubDate>Wed, 25 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170125/</guid>
      <description>在Lua语言中可以给表设置metatable，用C语言写Lua扩展库时，返回的句柄 可以是table(比如luaiconv库)，也可以是use</description>
    </item>
    
    <item>
      <title>Json中的null和undefined</title>
      <link>/post/170121/</link>
      <pubDate>Sat, 21 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170121/</guid>
      <description>由于Json是来自于JavaScript，因此讨论Json中的字段必须要回归到JS中。 null在JS语言定义里是一个字面量，且是基本类型。如</description>
    </item>
    
    <item>
      <title>SQLite的扩展机制</title>
      <link>/post/170115/</link>
      <pubDate>Sun, 15 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170115/</guid>
      <description>SQLite的基本单元是table及配套的view和index，如果要扩展功能就要使用virtual table机制，常见的有Full Text Sea</description>
    </item>
    
    <item>
      <title>groff中间格式翻译</title>
      <link>/post/170110/</link>
      <pubDate>Tue, 10 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170110/</guid>
      <description>使用x作为控制命令，#号后面是注释(不确定是否必须放在开头)。 输出分为prologue和body两大部分。 通过man的例子可以看到，最简单的</description>
    </item>
    
    <item>
      <title>业务分离和厘清概念</title>
      <link>/post/170109/</link>
      <pubDate>Mon, 09 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170109/</guid>
      <description>所有服务端的程序，都离不开3A(Authentication Authorization and Accounting)。 其中又以前两个最容易混淆。一般把鉴权称为A1，授权称</description>
    </item>
    
    <item>
      <title>排版和字体的关系</title>
      <link>/post/170108/</link>
      <pubDate>Sun, 08 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170108/</guid>
      <description>上一篇说了排版，排版之所以这么复杂，和字体有很大关系。 西文字体每个词长度不一致，在排版上首先要处理的是一行文字的fill/justify/h</description>
    </item>
    
    <item>
      <title>排版软件的故事</title>
      <link>/post/170106/</link>
      <pubDate>Fri, 06 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>/post/170106/</guid>
      <description>英文中把文字处理分为Typewrites和Word Processors两大类。平常用的Microsoft Word 是所见即所得的字处理系统，适合日常</description>
    </item>
    
    <item>
      <title>对Lua中Enviroment的理解</title>
      <link>/post/161225/</link>
      <pubDate>Sun, 25 Dec 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161225/</guid>
      <description>Lua5.2文档对编译基本单元chunk是这么说的： Lua把每个chunk看成一个带有可变数量参数的匿名函数体。而这个chunk在编译时， 又</description>
    </item>
    
    <item>
      <title>PHP模板引擎学习</title>
      <link>/post/161219/</link>
      <pubDate>Mon, 19 Dec 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161219/</guid>
      <description>用了3种模板引擎，从Smarty入手，但是这个库很大，文件又多。另外找了两个模板库， TinyButStrong(简称TBS)和RainTPL</description>
    </item>
    
    <item>
      <title>PHP的SESSION机制</title>
      <link>/post/161217/</link>
      <pubDate>Sat, 17 Dec 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161217/</guid>
      <description>HTTP/HTML起初是为展示文件而设计的，天然就是短连接没有状态。 像登陆业务却需要长连接，加之PHP又不具备daemon化特征，因此解决这</description>
    </item>
    
    <item>
      <title>CGI规范中`PATH_INFO`的理解</title>
      <link>/post/161216/</link>
      <pubDate>Fri, 16 Dec 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161216/</guid>
      <description>看一段PHP代码时，发现URL映射很不寻常，用了/index.php/article/?s=a这种格式。印象里.php这个SCRIPT_NA</description>
    </item>
    
    <item>
      <title>BW博客系统简探</title>
      <link>/post/161213/</link>
      <pubDate>Tue, 13 Dec 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161213/</guid>
      <description>从index.php开始看，先用include_once手动导入system.php，这里有个逻辑很有意思： 检查conf这个目录下有没有in</description>
    </item>
    
    <item>
      <title>FastCGI协议及PHP中的相关部分</title>
      <link>/post/161204/</link>
      <pubDate>Sun, 04 Dec 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161204/</guid>
      <description>FastCGI作为解决CGI协议的后继者，已深得人心，在Nginx和PHP中都默认支持。 比如php-cgi虽然名字是cgi，但是-b模式开启</description>
    </item>
    
    <item>
      <title>Apache和Nginx配置的理解</title>
      <link>/post/161125/</link>
      <pubDate>Fri, 25 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161125/</guid>
      <description>前文有提到过PHP是怎么和Apache和Nginx整合的，作为当今最流行的两大Web服务器，从配置文件来看看这二者对Web业务的理解。 还是先</description>
    </item>
    
    <item>
      <title>X509证书与GPG验证</title>
      <link>/post/161124/</link>
      <pubDate>Thu, 24 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161124/</guid>
      <description>证书定义 加密体系中证书是非常重要的一环，最有名的标准就是X.509。它使用ASN1格式描述，这个标准有3个版本，主要用的是V1和V3版本。证</description>
    </item>
    
    <item>
      <title>PHP两种模式下的调试功能</title>
      <link>/post/161120/</link>
      <pubDate>Sun, 20 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161120/</guid>
      <description>PHP语言相较于其它语言一个很大的不同，从一开始就定位在一种宿主语言。 它是由Web服务器来调用，而不像其它脚本语言，如Perl或Python</description>
    </item>
    
    <item>
      <title>简说CSRF</title>
      <link>/post/161113/</link>
      <pubDate>Sun, 13 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161113/</guid>
      <description>网络攻击中有种技巧，叫CSRF(Cross-site Request Forgery)，跨站请求伪造。 什么意思呢： 正常用户和服务器之间的请求是真实的请求，而</description>
    </item>
    
    <item>
      <title>通过限制来降低沟通成本</title>
      <link>/post/161112/</link>
      <pubDate>Sat, 12 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161112/</guid>
      <description>看了王垠的对Rust语言的分析， 其中提到一点，少用类型推导而用明确的类型声明，大概这种大逆不道的话，也只有王垠敢说吧。 但是他的原因我是深以为</description>
    </item>
    
    <item>
      <title>一个GDB和GCC版本不同引起的定位问题</title>
      <link>/post/161104/</link>
      <pubDate>Fri, 04 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161104/</guid>
      <description>有同事问起调试过程中，触发了SIGFPE除0错误，但是通过core的bt命令， 却发现出在pthread_create函数上，非常不可思议。今</description>
    </item>
    
    <item>
      <title>设计方案的不动点和弱化点</title>
      <link>/post/161102/</link>
      <pubDate>Wed, 02 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161102/</guid>
      <description>软件开发领域里有句教训：手里拿了锤子，看什么都是钉子。这句话也可以反过来看，并不是所有的需求都是钉子，面对不是钉子的需求，也就不应该用锤子的</description>
    </item>
    
    <item>
      <title>变倍与聚焦</title>
      <link>/post/161031/</link>
      <pubDate>Mon, 31 Oct 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161031/</guid>
      <description>监控行业的相机有枪式和球式两种，还有种半球但实质上和枪式一样，只是安装方式不同。 两种相机因为外形和机械结构的不同，使用场景也有很大差异。 比如</description>
    </item>
    
    <item>
      <title>一次安卓刷机失败的修复过程</title>
      <link>/post/161023/</link>
      <pubDate>Sun, 23 Oct 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161023/</guid>
      <description>手头有个华为手机，自带的EMUI实在太难用，偶然在华为论坛找到一个flyme的链接，大喜过望马上准备刷机。那篇帖子提供了两个链接，并且告诫说</description>
    </item>
    
    <item>
      <title>表单的请求类型</title>
      <link>/post/161019/</link>
      <pubDate>Wed, 19 Oct 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161019/</guid>
      <description>有很多的文章会讲http协议里，Post和Get的区别，说点我的补充理解。 不管是Get或者Post请求，除非是单纯获取信息类请求，总是会带些</description>
    </item>
    
    <item>
      <title>Lua调试器clidebug使用说明</title>
      <link>/post/161011/</link>
      <pubDate>Tue, 11 Oct 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/161011/</guid>
      <description>用lua -lclidebug xxx.lua来启动，进入后会停在第一行。 接下来介绍常用命令。 setb linenum [file] &amp;ndash; 设置指定行号的断点，默认打在当前文件 tb linenum [file] &amp;ndash; 设置临时断点，执</description>
    </item>
    
    <item>
      <title>大华设备协议兼容策略说明</title>
      <link>/post/160930/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160930/</guid>
      <description>大华设备在发展的过程中，产生了二代和三代两套协议。 三代协议使用前期由于缺乏管控，同样功能的三代协议会有不同的表现形式， (比如摄像头属性的配置</description>
    </item>
    
    <item>
      <title>北京之行</title>
      <link>/post/160914/</link>
      <pubDate>Wed, 14 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160914/</guid>
      <description>9月14日-国美、南锣鼓巷、景山公园 上午10点到北京站，并入住宾馆，往中国美术馆。南锣鼓巷，景山公园。 1楼是油画展，特别写实的只有3幅，其中</description>
    </item>
    
    <item>
      <title>协议工作该如何演进</title>
      <link>/post/160815/</link>
      <pubDate>Mon, 15 Aug 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160815/</guid>
      <description>协议岗位作为职能部门，工作本身不容易出彩。出了问题会被追责，做得好无非就是不出问题，但不出问题这个标准在组织内部是没有意义的。 曾经有比较理想</description>
    </item>
    
    <item>
      <title>RAII、智能指针和GC</title>
      <link>/post/160813/</link>
      <pubDate>Sat, 13 Aug 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160813/</guid>
      <description>C++作为接近底层控制的语言，天然地要负责资源管理。资源并不单指内存， 还包括了文件句柄。从这个角度看，动态语言所带的垃圾回收只管理内存， 却不</description>
    </item>
    
    <item>
      <title>接入协议、账户体系和权限</title>
      <link>/post/160812/</link>
      <pubDate>Fri, 12 Aug 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160812/</guid>
      <description>视频监控行业有个Onvif协议，作用是通过这种协议来控制设备。 由于Onvif是个行业级的通用标准，修订比较漫长，甚至很多定制的协议根本不可能</description>
    </item>
    
    <item>
      <title>使用CVS管理版本</title>
      <link>/post/160728/</link>
      <pubDate>Thu, 28 Jul 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160728/</guid>
      <description>历史 代码的差分和比较一直是存在的，diff和patch干的就是这个，diff看着简单，其背后的理论延伸非常庞大，输出格式也有多种，除了默认的</description>
    </item>
    
    <item>
      <title>几种语言作用域的比较</title>
      <link>/post/160718/</link>
      <pubDate>Mon, 18 Jul 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160718/</guid>
      <description>起因和Lua 程序大概是这样的： while do local ctx = ... end saveToFile(ctx) 程序执行到最后，总会报一个写入nil的错误。我一度以为是在处理数据时没有赋值，但反复核对都没有</description>
    </item>
    
    <item>
      <title>我理解的面向对象设计原则</title>
      <link>/post/160621/</link>
      <pubDate>Tue, 21 Jun 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160621/</guid>
      <description>面向对象的程序设计和面向对象的程序语言，两者并不完全一样。 面向对象的程序设计是一系列原则，是指导思想；而面向对象的语言， 则是把这些原则和思想</description>
    </item>
    
    <item>
      <title>PHP与Web服务器的集成方式</title>
      <link>/post/160611/</link>
      <pubDate>Sat, 11 Jun 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160611/</guid>
      <description>PHP是一种宿主语言，即它主要的应用方式是寄宿在其它程序内的。 最直观的理解就是作为动态网页的开发语言，监听HTTP请求并不在PHP 之内做，一</description>
    </item>
    
    <item>
      <title>SSL杂记</title>
      <link>/post/160601/</link>
      <pubDate>Wed, 01 Jun 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160601/</guid>
      <description>SSL和OpenSSL的关系，就好比C++和Visual C++的关系。OpenSSL是业界公认的烂代码，但也许是出来比较早，在江湖上已立稳了</description>
    </item>
    
    <item>
      <title>Url Rewrite和PHP路由的初步认识</title>
      <link>/post/160522/</link>
      <pubDate>Sun, 22 May 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160522/</guid>
      <description>使用PHP开发网站，最基本的做法是将Url路径指向某个php页面，然后通过GET或POST方法向这个页面传递参数来实现。如果是GET方式，U</description>
    </item>
    
    <item>
      <title>我对两种同步异步的认识</title>
      <link>/post/160515/</link>
      <pubDate>Sun, 15 May 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160515/</guid>
      <description>网络编程中经常会遇到如上四个概念，网上也有很多讲解，我想讲一个 至少是没有看到过的提法。 先给我的认识： 同步异步：针对的是函数调用者，即call</description>
    </item>
    
    <item>
      <title>安卓野Rom手动清毒记</title>
      <link>/post/160505/</link>
      <pubDate>Thu, 05 May 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160505/</guid>
      <description>去年底换了个TCL手机，因为原生Rom不好用恰好网上的Rom也比较多，反复尝试就Flyme还算好用，可惜在ROM之家或ROM基地等几个网站上</description>
    </item>
    
    <item>
      <title>程序的被集成性</title>
      <link>/post/160424/</link>
      <pubDate>Sun, 24 Apr 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160424/</guid>
      <description>算是一点杂想吧。起因是调试一个bug引起的。 公司产品的通信协议一直都是明文，为了达到安全审计的要求，就对信令做了RSA+AES的加密，虽然达</description>
    </item>
    
    <item>
      <title>C&#43;&#43;模板引起的一个二进制兼容问题</title>
      <link>/post/160412/</link>
      <pubDate>Tue, 12 Apr 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160412/</guid>
      <description>问题来源是这样的，公司的基础库里，用于实现Observer模式的Signal库是模板写的。模板嘛实现代码都在.h头文件里，在之前的一个版本里</description>
    </item>
    
    <item>
      <title>PNG格式的启发</title>
      <link>/post/160328/</link>
      <pubDate>Mon, 28 Mar 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160328/</guid>
      <description>都说PNG格式是二进制格式中的优秀范例，文档也写得非常好。这周断断续续看了RFC2083，常有拍案之处。 PNG的总体格式是8字节的格式头和一</description>
    </item>
    
    <item>
      <title>模块功能的划分与解耦</title>
      <link>/post/160313/</link>
      <pubDate>Sun, 13 Mar 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160313/</guid>
      <description>这周工作上解决了一个困惑我很久的需求，记一些要点。 在C-S模型中，向来都是客户端发请求服务端应答，偶尔也会有服务端推送业务，但已经是比较不常</description>
    </item>
    
    <item>
      <title>Openresty代码初读</title>
      <link>/post/160304/</link>
      <pubDate>Fri, 04 Mar 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160304/</guid>
      <description>我在公司内网的服务器从Apache httpd换成Openresty也有半年左右了，切换之后没有去深入研究，最近重新开始研究，一点初步的理解，</description>
    </item>
    
    <item>
      <title>使用Lazy-Stream方式实现Fibnacci数列</title>
      <link>/post/160218/</link>
      <pubDate>Thu, 18 Feb 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160218/</guid>
      <description>起因是看到一篇讲stackless方式coroutine的文章，给的例子是用js写的。用Lua重写了一遍，感觉有些思路上以前没有想到过，做点</description>
    </item>
    
    <item>
      <title>stackless和stackfull概念在VM上的一些理解</title>
      <link>/post/160214/</link>
      <pubDate>Sun, 14 Feb 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160214/</guid>
      <description>以前知道有个stackless的python实现，但不明白是什么意思，看一篇分析Lua虚拟机的文章也提到了这个概念，就做个记录。 stackless pytho</description>
    </item>
    
    <item>
      <title>SSH点滴</title>
      <link>/post/160204/</link>
      <pubDate>Thu, 04 Feb 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160204/</guid>
      <description>验证方式 从日志能看到3种验证方式，debug3: preferred publickey,keyboard-interactive,password。后两种表现</description>
    </item>
    
    <item>
      <title>Widnows的编译库的理解</title>
      <link>/post/160131/</link>
      <pubDate>Sun, 31 Jan 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160131/</guid>
      <description>生成动态库 windows下生成动态库，会输出3个文件。通过dumpbin把三者的段内容分别打印并比较一下。 先说下类型，其中exp也是COFF</description>
    </item>
    
    <item>
      <title>GCC编译4阶段的一些理解</title>
      <link>/post/160109/</link>
      <pubDate>Sat, 09 Jan 2016 12:00:00 +0000</pubDate>
      
      <guid>/post/160109/</guid>
      <description>起因是这样的，安装了GCC4.7和4.8两个版本， 但是4.8不知什么原因输出临时目录总是出错，原因及修改方法见这里， 所以只能用4.8配合-p</description>
    </item>
    
    <item>
      <title>两个一直理解错误的编译问题</title>
      <link>/post/151129/</link>
      <pubDate>Sun, 29 Nov 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/151129/</guid>
      <description>1.dll是可以直接替换而不需要重新编译的。 一直以来，我都以为只有so可以做到直接替换，而dll则不同。因为dll可以选择在编译时候通过.l</description>
    </item>
    
    <item>
      <title>Andoird上用kbox模拟linux环境</title>
      <link>/post/151006/</link>
      <pubDate>Tue, 06 Oct 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/151006/</guid>
      <description>随着这几年安卓机的军备竞赛，一拨拨的性能“落后”的旧手机被淘汰下来闲置在家，却又不能发挥作用。手头就有一个13年的老机，A8单核，1G内存放</description>
    </item>
    
    <item>
      <title>软件可靠性硬件可靠</title>
      <link>/post/150926/</link>
      <pubDate>Sat, 26 Sep 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150926/</guid>
      <description>通常我们在写软件时，总会做各种各样的错误或异常判断，比如输入非法啊，执行异常之类的。但我们很少去怀疑是不是硬件本身出现问题，仿佛这个世界，只</description>
    </item>
    
    <item>
      <title>Chomsky的4型文法与BNF</title>
      <link>/post/150904/</link>
      <pubDate>Fri, 04 Sep 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150904/</guid>
      <description>按序有4种文法，从强到弱排列如下 Type-0：也称短语文法，产生式为A-〉B，A和B均包含terminal和nonterminal，表达力最</description>
    </item>
    
    <item>
      <title>信息的价值与一篇机器学习文章读后感</title>
      <link>/post/150725/</link>
      <pubDate>Sat, 25 Jul 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150725/</guid>
      <description>当媒体说互联网带来了知识的普及，这句话并没有全部说对。我一直就疑惑， 虽然互联网上看似能搜索到很多东西，但是有两个问题： 信息是谁放上去的，他出</description>
    </item>
    
    <item>
      <title>在CentOS和FreeBSD上安装OpenResty的一些记录</title>
      <link>/post/150719/</link>
      <pubDate>Sun, 19 Jul 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150719/</guid>
      <description>花了两个周末的时间，分别在CentOS6.6和FreeBSD10.1上安装并跑起了OpenResty，虽说没什么技术难度，但有些遇到的问题还</description>
    </item>
    
    <item>
      <title>变量类型与Lua的local关键字</title>
      <link>/post/150705/</link>
      <pubDate>Sun, 05 Jul 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150705/</guid>
      <description>对变量来说，有几个属性：1 类型，2 可变性，3 作用域 对1.类型来说，动态语言不需要事先声明，所以这一点是没有的。C或Java需要，(C++11</description>
    </item>
    
    <item>
      <title>lua闭包和其他语言比较以及修改upvalue</title>
      <link>/post/150628/</link>
      <pubDate>Sun, 28 Jun 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150628/</guid>
      <description>闭包能力比较 构建闭包的特殊性在于捕获非本地的栈上变量，如果是访问全局变量，不能称为闭包。最早明确这个特性的大约是scheme吧，lua和js</description>
    </item>
    
    <item>
      <title>函数参数的传值与传引用及语义</title>
      <link>/post/150616/</link>
      <pubDate>Tue, 16 Jun 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150616/</guid>
      <description>一年前因为工作上的需要，把一些文档在Apache上以网页的形式呈现出来，当时为赶着快速上线，就边学PHP边对着HTML语法，用最原始的方式把</description>
    </item>
    
    <item>
      <title>lua_call的机制理解</title>
      <link>/post/150405/</link>
      <pubDate>Sun, 05 Apr 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150405/</guid>
      <description>要执行lua函数，最后都会调用到lua_call族(包括pcall,pcallk等)，除去错误捕捉和coroutine相关的内容，只看最简单</description>
    </item>
    
    <item>
      <title>Lua的编译期和运行期区分</title>
      <link>/post/150329/</link>
      <pubDate>Sun, 29 Mar 2015 12:00:00 +0000</pubDate>
      
      <guid>/post/150329/</guid>
      <description>虽然是一门解释型语言，但Lua其实也分了编译期和运行期，只是通常在lua的程序里顺带把luac的功能给自动执行了。但作为一个运行效率为第一位</description>
    </item>
    
    <item>
      <title>lua的表方法及self参数</title>
      <link>/post/141112/</link>
      <pubDate>Wed, 12 Nov 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/141112/</guid>
      <description>对于Lua的表定义函数方法有两种语法，点和冒号。 比如一个表local t = {}，定义一个new方法有两种写法： function t.new() &amp;hellip; end function t:new() &amp;hellip; end 前一种就是常规的</description>
    </item>
    
    <item>
      <title>setjmp的机制及lua中的异常</title>
      <link>/post/141002/</link>
      <pubDate>Thu, 02 Oct 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/141002/</guid>
      <description>setjmp/longjmp是C标准的函数，常用的做法是用来实现异常/跳转。原型如下： int setjmp(jmp_buf env); int longjmp(jmp_buf env, int err); 这组函数依赖于jmp_buf的变量类型</description>
    </item>
    
    <item>
      <title>功能重用与接口设计</title>
      <link>/post/140712/</link>
      <pubDate>Sat, 12 Jul 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140712/</guid>
      <description>最近在做内部的维基网站，内容是从Word文档解析然后以页面形式呈现。Word可以导出Html，解析也就是针对Html的标签做些过滤并对需要的</description>
    </item>
    
    <item>
      <title>UTF8编码规范小记</title>
      <link>/post/140523/</link>
      <pubDate>Fri, 23 May 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140523/</guid>
      <description>看了Lua5.3的work2代码，从简单但个人觉得最常用的UTF8库看起，通过代码很快就明白UTF8的规则。 以前看中文UTF8编码，总是奇怪</description>
    </item>
    
    <item>
      <title>C语言如何获取Lua中的内容</title>
      <link>/post/140518/</link>
      <pubDate>Sun, 18 May 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140518/</guid>
      <description>C语言要与Lua交互并获取其中定义的函数，网上有些入门教程会用lua_getglobal，如果只是写demo这样是没有问题的，但显然用全局变</description>
    </item>
    
    <item>
      <title>Lua的require机制及限制</title>
      <link>/post/140517/</link>
      <pubDate>Sat, 17 May 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140517/</guid>
      <description>Lua与C的交互利用了lua_State这个结构，所有的参数传递、函数的调用及表数据的获取都在这个栈中完成。网上有的教程在介绍这个栈用法时，</description>
    </item>
    
    <item>
      <title>数字的精确与不精确</title>
      <link>/post/140313/</link>
      <pubDate>Thu, 13 Mar 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140313/</guid>
      <description>很久不写Scheme，写了个判断质数的函数却永远返回成功，看代码逻辑看不出问题，于是只能一个个函数去试验，好在Scheme交互式写法很容易就</description>
    </item>
    
    <item>
      <title>UDP广播多播和IPv6记要</title>
      <link>/post/140307/</link>
      <pubDate>Fri, 07 Mar 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140307/</guid>
      <description>广播与多播 UDP的socket才有的特性，其中广播是socket级的特性，需要setsockopt时指定SO_BROADCAST选项，而多播</description>
    </item>
    
    <item>
      <title>精巧的安全和DH算法</title>
      <link>/post/140303/</link>
      <pubDate>Mon, 03 Mar 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140303/</guid>
      <description>连续的每周六天上班着实太累，周日外面阳光明媚可却在家睡了一下午觉，到了晚上才缓过劲来。基本就在昏睡中度过一个周日。周末只有一天的感觉真是太不</description>
    </item>
    
    <item>
      <title>【译】Scheme的面向对象呈现（部分）</title>
      <link>/post/140225/</link>
      <pubDate>Tue, 25 Feb 2014 12:00:00 +0000</pubDate>
      
      <guid>/post/140225/</guid>
      <description>关于Scheme的OO呈现。 话题因为读者疑议而起，川合先亮出自己的观点，Scheme的OO呈现和别的语言并无太多不同，只是因为规范里没有定义</description>
    </item>
    
  </channel>
</rss>
